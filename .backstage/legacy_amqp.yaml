# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: os2mo-legacy-amqp
  title: OS2mo Legacy AMQP
  description: The old OS2mo AMQP
  annotations:
    github.com/project-slug: OS2mo/os2mo
    github.com/team-slug: OS2mo/developers
    sentry.io/project-slug: magenta/rammearkitektur
    backstage.io/source-location: url:https://git.magenta.dk/rammearkitektur/os2mo
    backstage.io/view-url: https://git.magenta.dk/rammearkitektur/os2mo/-/blob/master/.backstage/old_amqp.yaml
    backstage.io/edit-url: https://git.magenta.dk/rammearkitektur/os2mo/-/edit/master/.backstage/old_amqp.yaml
  tags:
    - os2mo
    - amqp
spec:
  type: asyncapi
  lifecycle: deprecated
  owner: user:default/emil
  system: os2mo-core
  definition: |
    asyncapi: 2.6.0
    info:
      title: OS2mo Legacy AMQP API
      version: 1.0.0
      description: |
        The Legacy OS2mo AMQP API

        Whenever a MO object is registered an AMQP message is sent to the MO message broker.

        The purpose of the message broker is to make it easier to build software that integrates with MO.
      license:
        name: MPL-2.0
        url: 'https://spdx.org/licenses/MPL-2.0.html'
      contact:
        name: Magenta ApS
        url: https://magenta.dk
        email: info@magenta.dk
    defaultContentType: text/plain
    servers:
      broker:
        url: '{username}:{password}@{host}:{port}'
        protocol: amqp
        description: OS2mo broker
        variables:
          username:
            description: Authentification username
            default: 'guest'
          password:
            description: Authentification password
            default: 'guest'
          host:
            description: The host at which the broker is available
          port:
            description: Secure connection (TLS) is available through port 5671.
            default: '5672'
            enum:
              - '5672'
              - '5671'
    channels:
      Changed:
        bindings:
          amqp:
            is: routingKey
            exchange:
              name: os2mo
              type: topic
              durable: true
              autoDelete: false
              vhost: /
        subscribe:
          message:
            messageId: Change Event
            summary: Message send whenever a change is registered
            payload:
              $ref: '#/components/messages/UUIDPayload'
        description: |
          Events are sent on a topic exchange, where the topic is on the following format:
          `<service>.<object-type>.<action>`

          For instance `employee.address.create` to signify that an employee has a new address.

          The valid `service`s are:
            * employee
            * org_unit

          The valid `object-type`s are:
            * address
            * association
            * employee
            * engagement
            * it
            * leave
            * manager
            * org_unit
            * related_unit
            * role

          The valid `action`s are:
            * create
            * update
            * delete
    components:
      messages:
        UUIDPayload:
          name: uuid
          title: UUID payload
          summary: Inform that an entity may have changed state
          contentType: application/json
          payload:
            $ref: '#/components/schemas/PayloadType'
          examples:
            - name: Change Event
              summary: Notification that an entity has changed at a certain time
              payload:
                uuid: c390b9a2-7202-48e6-972b-ce36a90065c4
                time: "2019-03-24T13:02:15.132025"
      schemas:
        PayloadType:
          type: object
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'
            time:
              $ref: '#/components/schemas/changedAt'
        changedAt:
          type: string
          format: date-time
          description: Date and time when the change was made.
        UUID:
          type: string
          description: Universally Unique Identifier (UUID)
          format: uuid
          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
          minLength: 36
          maxLength: 36
