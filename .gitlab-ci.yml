# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

################################################################################
# Changes to this file requires approval from Labs. Please add a person from   #
# Labs as required approval to your MR if you have any changes.                #
################################################################################

# For `docker push` to work, the following envionment variables have to set in
# the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

stages:
  - lint
  # build stage is not blocked by lint stage, as we have a DAG:
  # https://docs.gitlab.com/ee/ci/directed_acyclic_graph/index.html
  - prebuild
  - build
  - test
  - prepare-release
  - release
  - deploy

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo
  KANIKO_VERSION: v1.3.0

  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  FRONTEND_IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-frontend
  KEYCLOAK_IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-keycloak
  KEYCLOAK_DB_IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-keycloak-db

  POETRY_VERSION: 1.1.8
  PYPROJECT_ROOT: "./backend"

include:
  - project: "labs/salt-automation"
    ref: "master"
    file: "/gitlab-ci-templates/common/autopub.v1.yml"
  - project: "labs/salt-automation"
    ref: "master"
    file: "/gitlab-ci-templates/common/docker-release.v1.yml"

# Only run pipeline when pushing a tag or a branch.
# This is a workaround for a bug causing detached pipelines on MRs
# See: https://gitlab.com/gitlab-org/gitlab/-/issues/34756
#      https://docs.gitlab.com/ee/ci/yaml/#workflowrules-templates
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

.poetry-install: &poetry-install
  - pip3 install poetry==${POETRY_VERSION}
  - poetry config virtualenvs.create false
  - cd backend && poetry install --no-interaction

.master-rules: &master-rules
  rules:
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success

# Lint stage
#############

.lint-default: &lint-default
  <<: *master-rules
  stage: lint
  interruptible: true
  needs: []
  image: python:3.8
  services: []
  tags:
    - docker

Lint Python:
  <<: *lint-default
  before_script:
    - pip install pre-commit
    - pre-commit install
  script:
    - pre-commit run --all-files

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

REUSE compliance:
  <<: *lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

Lint shell scripts:
  <<: *lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored -c | xargs shellcheck

# Prebuild stage
#############

Prebuild Keycloak-realm:
  <<: *master-rules
  stage: prebuild
  interruptible: true
  needs: []
  image:
    name: magentaaps/os2mo-keycloak-realm-builder:2.3.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none # We do not need the source code

    KEYCLOAK_VERSION: 14.0.0
    KEYCLOAK_SSL_REQUIRED: external # for MO
    KEYCLOAK_SSL_REQUIRED_MO: external # for realm builder
    KEYCLOAK_LORA_REALM_ENABLED: "true"
    KEYCLOAK_LORA_CLIENT_SECRET: 158a2075-aa8a-421c-94a4-2df35377014a
    KEYCLOAK_DIPEX_CLIENT_ENABLED: "true"
    KEYCLOAK_DIPEX_CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
    KEYCLOAK_REALM_USERS: '[{"username": "bruce", "password": "bruce", "firstname": "Bruce", "lastname": "Lee", "email": "bruce@kung.fu", "enabled": true, "uuid": "99e7b256-7dfa-4ee8-95c6-e3abe82e236a"}]'
    KEYCLOAK_MO_CLIENT_REDIRECT_URI: '["*"]'
    KEYCLOAK_MO_CLIENT_WEB_ORIGIN: '["*"]'
  script:
    - export KEYCLOAK_REALM_JSON_PATH=$PWD/keycloak-realm.json
    - cd /app
    - python main.py
  artifacts:
    paths:
      - keycloak-realm.json
    expire_in: 1 day

# Build stage
#############

Build OS2MO:
  stage: build
  interruptible: true
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success

Build frontend:
  <<: *master-rules
  stage: build
  interruptible: true
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${FRONTEND_IMAGE_SHA}
      --target=frontend
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}

Build Keycloak:
  <<: *master-rules
  stage: build
  interruptible: true
  needs: ["Prebuild Keycloak-realm"]
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.ci.keycloak
      --destination=${KEYCLOAK_IMAGE_SHA}

Build Keycloak DB:
  <<: *master-rules
  stage: build
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.ci.keycloak-db
      --destination=${KEYCLOAK_DB_IMAGE_SHA}

pages:
  <<: *master-rules
  image: python:3.8
  interruptible: true
  stage: build
  needs: []
  services: []
  tags:
    - docker
  before_script:
    - pip3 install poetry==${POETRY_VERSION}
    - poetry config virtualenvs.create false
    - cd docs && poetry install --no-interaction
  script:
    - mkdocs build --strict --site-dir=$CI_PROJECT_DIR/public
  artifacts:
    paths:
      - public/
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

# Test stage
############

.test-default: &test-default
  <<: *master-rules
  stage: test
  interruptible: true
  needs:
    ["Build OS2MO", "Build Keycloak", "Build Keycloak DB", "Build frontend"]
  services: []
  tags:
    - docker
    - network-per-build
  variables:
    # Enable one docker network per job on the runner. This enables services to
    # reach each other over the network. It requires a special runner with this
    # feature. The feature is introduced in
    # https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1569, but not
    # officially released in any Gitlab runner. It should hopefully be released
    # with 12.6 on 2019-12-22.
    FF_NETWORK_PER_BUILD: 1
    # for postgres-os2mo service
    DB_NAME: mox
    DB_USER: mox
    DB_PASSWORD: mox
    CONF_DB_NAME: mora
    CONF_DB_USER: mora
    CONF_DB_PASSWORD: mora
    SESSIONS_DB_NAME: sessions
    SESSIONS_DB_USER: sessions
    SESSIONS_DB_PASSWORD: sessions
    # for mox service
    MAX_WORKERS: "1"
    TESTING_API: "true"
    HYPOTHESIS_PROFILE: ci
    LORA_AUTH: "false"
    DB_HOST: mox-db
    DB_EXTENSIONS_PATH: "oio_rest/oio_rest/db_extensions/mo-01.json"
    # for mo
    DUMMY_MODE: "true"
    ENVIRONMENT: "testing"
    PYTHONASYNCIODEBUG: "1"
    LORA_URL: "http://mox/"
    KEYCLOAK_SCHEMA: "http"
    KEYCLOAK_PORT: 8080
    KEYCLOAK_AUTH_SERVER_URL: "http://keycloak:8080/auth/"
    KEYCLOAK_VERIFY_AUDIENCE: "false"
    CONF_DB_HOST: "mox-db"
    CONF_DB_PORT: "5432"
    AMQP_ENABLE: "false"
    QUERY_EXPORT_DIR: "/queries"
    COVERAGE_FILE: $CI_PROJECT_DIR/.coverage
    BASE_URL: http://mo:80
    GRAPHQL_ENABLE: "true"
    GRAPHQL_AUTH: "false"

Unit-test:
  <<: *test-default
  image:
    name: ${IMAGE_SHA}
  services:
    - name: magentaaps/postgres-os2mo:10-11.7-test
      alias: mox-db
    - name: magentaaps/lora:3.0.0
      alias: mox
    - name: ${KEYCLOAK_DB_IMAGE_SHA}
      alias: keycloak-db
    - name: ${KEYCLOAK_IMAGE_SHA}
      alias: keycloak
  script:
    - pytest
      --cov=mora
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov-report html:$CI_PROJECT_DIR/coverage-html
      --cov-report term
      --cov-fail-under=50
      -p no:cacheprovider
      --color=yes
      --show-capture=no
      --workers auto
      -m "not serial"
      -k "not graphapi"
      backend/tests/
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage-html
    reports:
      junit: $CI_PROJECT_DIR/junit.xml

GraphAPI-test:
  <<: *test-default
  image:
    name: ${IMAGE_SHA}
  services:
    - name: magentaaps/postgres-os2mo:10-11.7-test
      alias: mox-db
    - name: magentaaps/lora:3.0.0
      alias: mox
    - name: ${KEYCLOAK_DB_IMAGE_SHA}
      alias: keycloak-db
    - name: ${KEYCLOAK_IMAGE_SHA}
      alias: keycloak
  script:
    - pytest
      -k "graphapi"
      --cov=backend/mora/graphapi
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov-report html:$CI_PROJECT_DIR/coverage-html
      --cov-report term
      --cov-fail-under=60
      -p no:cacheprovider
      --color=yes
      --show-capture=no
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage-html
    reports:
      junit: $CI_PROJECT_DIR/junit.xml

Integration-test:
  <<: *test-default
  image:
    name: ${IMAGE_SHA}
  parallel: 6
  services:
    - name: magentaaps/postgres-os2mo:10-11.7-test
      alias: mox-db
    - name: magentaaps/lora:3.0.0
      alias: mox
    - name: ${KEYCLOAK_DB_IMAGE_SHA}
      alias: keycloak-db
    - name: ${KEYCLOAK_IMAGE_SHA}
      alias: keycloak
  script:
    - pytest
      -m "serial"
      --shard-id=$(($CI_NODE_INDEX - 1))
      --num-shards=$CI_NODE_TOTAL
      --cov=mora
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov-report html:$CI_PROJECT_DIR/coverage-html
      --cov-report term
      --cov-fail-under=60
      -p no:cacheprovider
      --color=yes
      --show-capture=no
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage-html
    reports:
      junit: $CI_PROJECT_DIR/junit.xml

Vue-unit-test:
  <<: *test-default
  image:
    name: ${FRONTEND_IMAGE_SHA}
  variables:
    GIT_STRATEGY: none # We do not need the source code
  script:
    - cd /app/frontend
    - yarn install --dev
    - yarn test:unit
      --coverage
      --coverageReporters=cobertura
      --coverageReporters=html
      --coverageReporters=text-summary
      --coverageDirectory=$CI_PROJECT_DIR/coverage
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage
    reports:
      cobertura: $CI_PROJECT_DIR/coverage/cobertura-coverage.xml

# e2e-test:
#   <<: *test-default
#   image:
#     name: magentalabs/testcafe:latest
#     entrypoint: ["/bin/sh", "-c"]
#   services:
#     - name: magentaaps/postgres-os2mo:9.6.15-2-test
#       alias: mox-db
#     - name: magentaaps/lora:dev
#       alias: mox
#     - name: ${IMAGE_SHA}
#       alias: mo
#     - name: ${KEYCLOAK_IMAGE_SHA}
#       alias: keycloak
#     - name: ${KEYCLOAK_DB_IMAGE_SHA}
#       alias: keycloak-db
#   script:
#     - sleep 30
#     - cd /
#     - /opt/testcafe/docker/testcafe-docker.sh
#         chromium:headless
#         $CI_PROJECT_DIR/frontend/e2e-tests
#         --skip-js-errors
#         --speed 0.7
#         --selector-timeout 30000
#         --screenshot $CI_PROJECT_DIR/artifacts
#         --video $CI_PROJECT_DIR/artifacts
#   artifacts:
#     when: always
#     paths:
#       - $CI_PROJECT_DIR/artifacts
#   allow_failure: true

# Release stage
###############

Release to Dev:
  stage: deploy
  needs: ["Release version"]
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  rules:
    # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  tags:
    - docker
  script:
    - apk add git
    - wget https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -O /usr/bin/yq
    - chmod +x /usr/bin/yq
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation
    - yq e -i '.spec.values.os2mo.image.tag = strenv(CI_COMMIT_TAG)' flux/projects/os2mo/config/dev.yaml
    - git add flux/projects/os2mo/config/dev.yaml
    - git commit -m "[cd] Deploy OS2MO $CI_COMMIT_TAG to flux dev servers"
    - git push

Release to Test:
  stage: deploy
  needs: []
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  rules:
    # Only run these on scheduled jobs
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "release_to_test"
      when: on_success
    - when: never
  tags:
    - docker
  script:
    - apk add git
    - wget https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -O /usr/bin/yq
    - chmod +x /usr/bin/yq
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation
    - export DEV_VERSION=$(yq e '.spec.values.os2mo.image.tag' flux/projects/os2mo/config/dev.yaml)
    - yq e -i '.spec.values.os2mo.image.tag = strenv(DEV_VERSION)' flux/projects/os2mo/config/test.yaml
    - git add flux/projects/os2mo/config/test.yaml
    - git commit -m "[cd] Deploy OS2MO $DEV_VERSION to flux test servers"
    - git push

Release to Prod:
  stage: deploy
  needs: []
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  rules:
    # Only run these on scheduled jobs
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "release_to_prod"
      when: on_success
    - when: never
  tags:
    - docker
  script:
    - apk add git
    - wget https://github.com/mikefarah/yq/releases/download/v4.12.1/yq_linux_amd64 -O /usr/bin/yq
    - chmod +x /usr/bin/yq
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation
    - export TEST_VERSION=$(yq e '.spec.values.os2mo.image.tag' flux/projects/os2mo/config/test.yaml)
    - yq e -i '.spec.values.os2mo.image.tag = strenv(TEST_VERSION)' flux/projects/os2mo/config/prod.yaml
    - git add flux/projects/os2mo/config/prod.yaml
    - git commit -m "[cd] Deploy OS2MO $TEST_VERSION to flux prod servers"
    - git push
