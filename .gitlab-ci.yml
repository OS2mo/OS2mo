# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

################################################################################
# Changes to this file requires approval from Labs. Please add a person from   #
# Labs as required approval to your MR if you have any changes.                #
################################################################################

# For `docker push` to work, the following envionment variables have to set in
# the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

stages:
  - lint
  # build stage is not blocked by lint stage, as we have a DAG:
  # https://docs.gitlab.com/ee/ci/directed_acyclic_graph/index.html
  - prebuild
  - build
  - test
  - release
  - deploy

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo

  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  FRONTEND_IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-frontend
  KEYCLOAK_IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-keycloak
  KEYCLOAK_DB_IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-keycloak-db

  IMAGE_DEV: ${RELEASE_REGISTRY_IMAGE}:dev
  IMAGE_RC: ${RELEASE_REGISTRY_IMAGE}:rc
  IMAGE_VERSION: ${RELEASE_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  IMAGE_LATEST: ${RELEASE_REGISTRY_IMAGE}:latest


# Only run pipeline when pushing a tag or a branch.
# This is a workaround for a bug causing detached pipelines on MRs
# See: https://gitlab.com/gitlab-org/gitlab/-/issues/34756
#      https://docs.gitlab.com/ee/ci/yaml/#workflowrules-templates
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH


# Lint stage
#############

.lint-default: &lint-default
  stage: lint
  needs: []
  image: python:3.8
  services: []
  tags:
    - docker

Lint Python:
  <<: *lint-default
  before_script:
    - pip3 install -r backend/requirements-lint.txt
  script:
    - cd backend
    - flake8 --version
    # black-compatible settings
    # https://github.com/psf/black/pull/36
    - flake8 --extend-ignore=B008,W503

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint

REUSE compliance:
  <<: *lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

Lint shell scripts:
  <<: *lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored -c | xargs shellcheck


# Prebuild stage
#############

Prebuild Keycloak-realm:
  stage: prebuild
  needs: []
  image: 
    name: magentaaps/os2mo-keycloak-realm-builder:1.1.1
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none # We do not need the source code

    KEYCLOAK_VERSION: 14.0.0
    KEYCLOAK_SSL_REQUIRED: external
    KEYCLOAK_DIPEX_CLIENT_ENABLED: "true"
    KEYCLOAK_DIPEX_CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
    KEYCLOAK_REALM_USERS: '[
      {
        "username": "bruce",
        "password": "bruce",
        "firstname": "Bruce",
        "lastname": "Lee",
        "email": "bruce@kung.fu",
        "enabled": true,
        "uuid": "99e7b256-7dfa-4ee8-95c6-e3abe82e236a"
      }
    ]'
    KEYCLOAK_MO_CLIENT_REDIRECT_URI: '["*"]'
    KEYCLOAK_MO_CLIENT_WEB_ORIGIN: '["*"]'
  script:
    - export KEYCLOAK_REALM_JSON_PATH=$PWD/keycloak-realm.json
    - cd /app
    - python main.py
  artifacts:
    paths:
      - keycloak-realm.json
    expire_in: 1 day

# Build stage
#############

Build OS2MO:
  stage: build
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:v1.5.2-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}

Build frontend:
  stage: build
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:v1.5.2-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${FRONTEND_IMAGE_SHA}
      --target=frontend
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}

Build Keycloak:
  stage: build
  needs: ["Prebuild Keycloak-realm"]
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:v1.5.2-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.ci.keycloak
      --destination=${KEYCLOAK_IMAGE_SHA}

Build Keycloak DB:
  stage: build
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:v1.5.2-debug
    entrypoint: [""]
  tags:
    - docker
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile.ci.keycloak-db
      --destination=${KEYCLOAK_DB_IMAGE_SHA}

Build docs:
  image: python:3.8
  stage: build
  needs: []
  services: []
  tags:
    - docker
  before_script:
    - pip3 install -r docs/requirements-docs.txt
  script:
    - sphinx-build -n -W --keep-going docs /doc-build
  artifacts:
    paths:
      - /doc-build


# Test stage
############

.test-default: &test-default
  stage: test
  needs: ["Build OS2MO", "Build Keycloak", "Build Keycloak DB", "Build frontend"]
  services: []
  tags:
    - docker
    - network-per-build
  variables:
    # Enable one docker network per job on the runner. This enables services to
    # reach each other over the network. It requires a special runner with this
    # feature. The feature is introduced in
    # https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1569, but not
    # officially released in any Gitlab runner. It should hopefully be released
    # with 12.6 on 2019-12-22.
    FF_NETWORK_PER_BUILD: 1
    # for postgres-os2mo service
    DB_NAME: mox
    DB_USER: mox
    DB_PASSWORD: mox
    CONF_DB_NAME: mora
    CONF_DB_USER: mora
    CONF_DB_PASSWORD: mora
    SESSIONS_DB_NAME: sessions
    SESSIONS_DB_USER: sessions
    SESSIONS_DB_PASSWORD: sessions
    # for mox service
    MAX_WORKERS: "1"
    TESTING_API: "true"
    DB_HOST: mox-db
    DB_EXTENSIONS_PATH: "oio_rest/oio_rest/db_extensions/mo-01.json"
    # for mo
    DUMMY_MODE: "true"
    ENVIRONMENT: "testing"
    LORA_URL: "http://mox/"
    KEYCLOAK_SCHEMA: "http"
    KEYCLOAK_PORT: 8080
    KEYCLOAK_AUTH_SERVER_URL: "http://keycloak:8080/auth/"
    CONF_DB_HOST: "mox-db"
    CONF_DB_PORT: "5432"
    AMQP_ENABLE: "false"
    QUERY_EXPORT_DIR: "/queries"
    COVERAGE_FILE: $CI_PROJECT_DIR/.coverage
    BASE_URL: http://mo:80


Alembic-test:
  <<: *test-default
  image:
    name: ${IMAGE_SHA}
  services:
    - name: magentaaps/postgres-os2mo:10-11.7-test
      alias: mox-db
  script:
    - /app/prestart.sh
    - cd /app/backend/mora/conf_db
    - ./alembic_test.sh
  artifacts:
    when: always


Unit-test:
  <<: *test-default
  image:
    name: ${IMAGE_SHA}
  services:
    - name: magentaaps/postgres-os2mo:10-11.7-test
      alias: mox-db
    - name: magentaaps/lora:1.13.1
      alias: mox
    - name: ${KEYCLOAK_DB_IMAGE_SHA}
      alias: keycloak-db
    - name: ${KEYCLOAK_IMAGE_SHA}
      alias: keycloak
  script:
    - pytest
      --cov=mora
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov-report html:$CI_PROJECT_DIR/coverage-html
      --cov-report term
      -p no:cacheprovider
      --color=yes
      backend/tests/
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage-html
    reports:
      junit: $CI_PROJECT_DIR/junit.xml

Vue-unit-test:
  <<: *test-default
  image:
    name: ${FRONTEND_IMAGE_SHA}
  variables:
    GIT_STRATEGY: none # We do not need the source code
  script:
    - cd /app/frontend
    - yarn install --dev
    - yarn test:unit
      --coverage
      --coverageReporters=cobertura
      --coverageReporters=html
      --coverageReporters=text-summary
      --coverageDirectory=$CI_PROJECT_DIR/coverage
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage
    reports:
      cobertura: $CI_PROJECT_DIR/coverage/cobertura-coverage.xml

e2e-test:
  <<: *test-default
  image:
    name: magentalabs/testcafe:latest
    entrypoint: ["/bin/sh", "-c"]
  services:
    - name: magentaaps/postgres-os2mo:9.6.15-2-test
      alias: mox-db
    - name: magentaaps/lora:dev
      alias: mox
    - name: ${IMAGE_SHA}
      alias: mo
    - name: ${KEYCLOAK_IMAGE_SHA}
      alias: keycloak
    - name: ${KEYCLOAK_DB_IMAGE_SHA}
      alias: keycloak-db
  script:
    - sleep 30
    - cd /
    - /opt/testcafe/docker/testcafe-docker.sh
        chromium:headless
        $CI_PROJECT_DIR/frontend/e2e-tests
        --skip-js-errors
        --speed 0.7
        --selector-timeout 30000
        --screenshot $CI_PROJECT_DIR/artifacts
        --video $CI_PROJECT_DIR/artifacts

  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/artifacts


# Release stage
###############

.release-default: &release-default
  stage: release
  needs: ["Unit-test", "e2e-test"]
  image: alpine:3.13
  variables:
    GIT_STRATEGY: none # We do not need the source code
  tags:
    - docker
  before_script:
    - apk add skopeo=1.2.1-r0

Release feature branch:
  <<: *release-default
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^feature\/.+$/
  script:
    - export IMAGE_FEATURE=$(echo "$CI_COMMIT_REF_NAME" | sed 's/\//_/g')
    - echo "Releasing ${CI_REGISTRY_IMAGE}/feature:${IMAGE_FEATURE}"
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      "docker://${IMAGE_SHA}"
      "docker://${CI_REGISTRY_IMAGE}/feature:${IMAGE_FEATURE}"

Release dev:
  <<: *release-default
  rules:
    - if: $CI_COMMIT_REF_NAME == "development"
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_DEV}"

Release rc:
  <<: *release-default
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^release\/.+$/
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_RC}"

Release master:
  <<: *release-default
  rules:
      # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
      - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_VERSION}"
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_LATEST}"


Create MR to deploy to test servers:
  stage: deploy
  needs: ["Release master"]
  image: alpine
  variables:
    GIT_STRATEGY: none # We do not need the source code
  rules:
      # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
      - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  tags:
    - docker
  script:
    - apk add git
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation
    - git checkout -b "cd/os2mo-$CI_COMMIT_TAG-deploy-test"
    - 'sed -i "s/OS2MO_SERVICE_OS2MO_DOCKER_IMAGE.*/OS2MO_SERVICE_OS2MO_DOCKER_IMAGE: magentaaps\/os2mo:$CI_COMMIT_TAG/g" salt/pillar/projects/os2mo/test_config.sls'
    - git add salt/pillar/projects/os2mo/test_config.sls
    - git commit -m "[cd] Deploy OS2MO $CI_COMMIT_TAG to test servers"
    - git push -o merge_request.create
               -o merge_request.target='master'
               -o merge_request.assign='christoffer'
               -u origin "cd/os2mo-$CI_COMMIT_TAG-deploy-test"
