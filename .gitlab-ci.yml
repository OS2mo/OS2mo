# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
# Global
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"

cache:
  key: "${CI_JOB_NAME}"
  paths:
    - .venv/
    - .cache/pip
    - .cache/pre-commit

stages:
  - lint
  - test
  - prepare-release
  - release

# ---------------------------------------------------------------------------
# Templates
# ---------------------------------------------------------------------------
.install-deps-template: &install-deps
  before_script:
    - pip install poetry
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install -vv
    - poetry run pre-commit install

.lint-template: &lint
  <<: *install-deps
  image: python:3.8
  stage: lint

.test-template: &test # Coverage needed too
  <<: *install-deps
  needs: []
  stage: test
  script:
    - poetry run pytest
      --junitxml=report.xml
      --cov=ramodels
      --cov-report=html
      --cov-fail-under=100
      -n auto
  artifacts:
    when: always
    paths:
      - htmlcov/
    reports:
      junit: report.xml
  variables:
    HYPOTHESIS_PROFILE: ci

.prep-release-template: &prep-release
  stage: prepare-release
  needs: []
  image: python:3.8
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"

.release-template: &release
  <<: *install-deps
  image: python:3.8
  stage: release
  rules:
    # Matches <version core> from SemVer 2.0.0 BNF grammar.
    # Ex. 2.3.4, but not 2.3.4-rc
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/

# ---------------------------------------------------------------------------
# Lint
# ---------------------------------------------------------------------------
Lint Project:
  <<: *lint
  script:
    - poetry run pre-commit run --all-files

# ---------------------------------------------------------------------------
# Test
# ---------------------------------------------------------------------------
Test on Python 3.8:
  <<: *test
  image: python:3.8

Test on Python 3.9:
  <<: *test
  image: python:3.9

# ---------------------------------------------------------------------------
# Release
# ---------------------------------------------------------------------------
Autopub:
  <<: *prep-release
  variables:
    PROJECT_ROOT: .
  tags:
    - docker
  before_script:
    # Setup git
    - mkdir -p ~/.ssh
    - cat .gitlab/gitlab-known-hosts >> ~/.ssh/known_hosts
    - git clone https://$AUTOPUB_USER:$AUTOPUB_TOKEN@git.magenta.dk/rammearkitektur/ra-data-models.git
    - cd ra-data-models
    - git checkout master
    - git config --global user.name "MagentaBot"
    - git config --global user.email "info@magenta.dk"
    # Prepare autopub
    - pip install autopub
    - pip install poetry
    - pip install toml
  script:
    - bash .gitlab/autopub.sh

Release to PyPI:
  <<: *release
  script: poetry publish --build -u OS2mo -p $PYPI_PWD

# ---------------------------------------------------------------------------
# Build pages
# ---------------------------------------------------------------------------
pages:
  <<: *install-deps
  image: python:3.8
  stage: release
  needs: []
  script:
    - poetry run python docs/generate_schemas.py
    - poetry run mkdocs build --strict --site-dir public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
