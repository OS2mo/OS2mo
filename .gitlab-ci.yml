# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

stages:
  - sync
  - lint
  - build
  - test
  - coverage
  - prepare-release
  - release
  - deploy
  - docs

variables:
  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo

  PRODUCT: os2mo
  COMPONENT: os2mo

  PYTEST_COV_MODULE: mora
  PYTEST_COV_FAIL_UNDER: 80

# Conditions
#############
# Global Conditions
.if-default-branch-refs: &if-default-branch-refs
  if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.if-tag: &if-tag
  if: '$CI_COMMIT_TAG'

.if-tag-semver: &if-tag-semver
  if: '$CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/'

.if-merge-request: &if-merge-request
  if: '$CI_MERGE_REQUEST_IID'

.if-schedule: &if-schedule
  if: '$CI_PIPELINE_SOURCE == "schedule"'

# Sync Conditions
.if-merge-request-labels-dont-interrupt: &if-merge-request-labels-dont-interrupt
  if: "$CI_MERGE_REQUEST_LABELS =~ /Pipeline::Sync::Don't Interrupt/"


####################
# Backend patterns #
####################
.backend-patterns: &backend-patterns
  - backend/**/*
  - docker/**/*
  - Dockerfile
  - pyproject.toml
  - poetry.lock
  - .gitlab-ci.yml


include:
  - local: ra-data-models/.gitlab-ci.yml
  - project: labs/salt-automation
    file:
      - gitlab-ci-templates/common/no-interrupt-meta.v1.yml
      - gitlab-ci-templates/common/conventional-commits.v1.yml
      - gitlab-ci-templates/python/pytest-meta.v1.yml
      - gitlab-ci-templates/common/docker-build-meta.v2.yml
      - gitlab-ci-templates/common/docker-release.v1.yml
      - gitlab-ci-templates/common/config-updater-salt.v1.yml
      - gitlab-ci-templates/common/config-updater-flux.v1.yml
  - project: labs/salt-automation
    file: gitlab-ci-templates/common/pre-commit.v1.yml
    rules:
      - <<: *if-merge-request

# Workflow
###########
workflow:
  rules:
    - <<: *if-tag
      variables:
        # Override the IMAGE_SHA variable on tag pipelines to avoid both the default
        # branch pipeline and tag pipeline overriding each other's images arbitrarily when
        # they are both running at the same time on master.
        IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - <<: *if-default-branch-refs
    - <<: *if-merge-request

default:
  # All jobs are interruptible by default
  interruptible: true

# Services
###########
.mo-variables:
  variables:
    PYTHONASYNCIODEBUG: "1"
    ENVIRONMENT: "testing"
    INSECURE_ENABLE_TESTING_API: "true"

    KEYCLOAK_SCHEMA: "http"
    KEYCLOAK_PORT: 8080
    KEYCLOAK_AUTH_SERVER_URL: "http://keycloak:8080/auth/"
    KEYCLOAK_VERIFY_AUDIENCE: "false"

    AMQP_ENABLE: "false"
    GRAPHQL_AUTH: "false"
    QUERY_EXPORT_DIR: "/tmp"

    MAX_WORKERS: "1"
    TESTING_API: "true"
    LORA_AUTH: "false"
    DB_HOST: mox-db
    DB_NAME: mox
    DB_USER: mox
    DB_PASSWORD: mox

.services:use-mo:
  # Remember to add `needs: [Build OS2mo]` if you overwrite `needs`.
  needs:
    - Build OS2mo
  image: $IMAGE_SHA
  extends:
    - .mo-variables

# Sync
#######
Do not interrupt:
  extends: .do-not-interrupt
  rules:
    - <<: *if-default-branch-refs
    - <<: *if-tag
    - <<: *if-schedule
    - <<: *if-merge-request-labels-dont-interrupt
    - when: manual
      allow_failure: true


# Lint
#######
.lint-base:
  stage: lint
  needs: []
  # TODO: Individual lint rules for each file type using 'changes' patterns
  rules:
    - <<: *if-merge-request

Lint Dockerfiles:
  extends: .lint-base
  image: hadolint/hadolint:latest-alpine
  before_script:
    - apk add fd
  script:
    - echo "Running Hadolint, a Dockerfile linter"
    - echo "For more information about reported errors, visit the Hadolint wiki on https://github.com/hadolint/hadolint/wiki"
    # Run fd without exec arg to produce a list of files to be linted
    - fd Dockerfile
    # Run hadolint on every Dockerfile
    - fd Dockerfile --exec hadolint

Lint shell scripts:
  # TODO: Do this as part of pre-commit instead
  extends: .lint-base
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored -c | xargs shellcheck


# Build
########
Build OS2mo:
  extends:
    - .build-docker
  variables:
    BUILD_DOCKER_EXTRA_FLAGS: --build-arg=COMMIT_SHA=${CI_COMMIT_SHA} --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}
  rules:
    - <<: *if-schedule
      when: never
    - when: on_success


# Tests
########
.test-rules:
  stage: test
  rules:
    - <<: *if-merge-request
      changes: *backend-patterns

Unit-test:
  extends:
    - .test-rules
    - .pytest
    - .mo-variables
  variables:
    PYPROJECT_PREFIX: "backend/"
    HYPOTHESIS_PROFILE: "ci"
    PYTEST_ADDOPTS: "-m 'not integration_test' --randomly-seed=$CI_PIPELINE_IID"

Integration-test:
  extends:
    - .test-rules
    - .pytest
    - .services:use-mo
  variables:
    PYPROJECT_PREFIX: "backend/"
    HYPOTHESIS_PROFILE: "ci"
    PYTEST_ADDOPTS: "-m 'integration_test' -p no:randomly --cov=oio_rest"  # TODO: enable randomness
  services:
    # mox db
    - name: magentaaps/postgres-os2mo:11-11.7-test
      alias: mox-db
      variables:
        DB_NAME: "mox"
        DB_USER: "mox"
        DB_PASSWORD: "mox"
    # Keycloak
    - name: quay.io/keycloak/keycloak:14.0.0
      alias: keycloak
      variables:
        KEYCLOAK_USER: "admin"
        KEYCLOAK_PASSWORD: "admin"
    - name: magentaaps/os2mo-keycloak-realm-builder:4.2.0
      # GitLab CI services are one-shot, without any restart policy, and does
      # not start in the order they are defined. The only way to ensure that
      # the realm builder runs after keycloak has started is by overwriting its
      # entrypoint to retry until it succeeds.
      entrypoint:
        - "sh"
        - "-c"
        - |
          while ! sh run.sh; do
            echo 'Waiting for keycloak...'
            sleep 1
          done
          # GitLab doesn't wait for services without an EXPOSE (port) definition
          # before starting the main job. This is a problem, since it doesn't
          # allow the realm builder to create the realm before the integration
          # tests tries to access it. As a workaround, we touch a sentinel in
          # /builds, which is shared amongst all jobs, and wait for it in the
          # main job's before_script.
          # https://docs.gitlab.com/ee/ci/services/
          touch /builds/.keycloak-realm-builder-finished
      variables:
        # Since GitLab CI doesn't support multiple services on the same port,
        # we cannot (easily) run a separate postgres for the realm builder's
        # terraform state.
        POSTGRES_CONNECTION_STRING: "postgres://mox:mox@mox-db/mox?sslmode=disable"
        KEYCLOAK_URL: "http://keycloak:8080"
        KEYCLOAK_ADMIN_USERNAME: "admin"
        KEYCLOAK_ADMIN_PASSWORD: "admin"
        KEYCLOAK_SSL_REQUIRED_MO: "external"
        KEYCLOAK_MO_CLIENT_REDIRECT_URI: '["*"]'
        KEYCLOAK_MO_CLIENT_WEB_ORIGIN: '["*"]'
        KEYCLOAK_REALM_USERS: '[{"username": "bruce", "password": "bruce", "firstname": "Bruce", "lastname": "Lee", "email": "bruce@kung.fu", "enabled": true, "uuid": "99e7b256-7dfa-4ee8-95c6-e3abe82e236a"}]'
  parallel: 8
  before_script:
    - !reference [.pytest, before_script]
    - |
      while [ ! -f /builds/.keycloak-realm-builder-finished ]; do
        echo 'Waiting for keycloak realm builder...'
        sleep 1
      done


Export coverage:
  extends:
    - .test-rules
    - .export_coverage
  needs:
    - Unit-test
    - Integration-test

Check coverage:
  extends:
    - .test-rules
    - .check_coverage
  needs:
    - Unit-test
    - Integration-test

# Docs
#######

.docs:rules:deploy-master-docs:
  rules:
    - <<: *if-schedule
      when: never
    - <<: *if-tag-semver
      when: never
    - <<: *if-default-branch-refs

.docs:rules:build-docs:
  rules:
    - <<: *if-merge-request
    - !reference [".docs:rules:deploy-master-docs", rules]

Export GQL Schema:
  stage: docs
  extends:
    - .docs:rules:build-docs
    - .services:use-mo
  variables:
    OUT: $CI_PROJECT_DIR/docs/src/graphql/voyager.html
    QUERY_EXPORT_DIR: "/tmp"
  script:
    - python docs/schema_to_voyager.py
  artifacts:
    paths:
      - $OUT

Export Changelog:
  stage: docs
  extends:
    - .docs:rules:build-docs
  needs: []
  image: python:3
  variables:
    OUT: $CI_PROJECT_DIR/docs/.dynamic_changelog.md
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - pip3 install git+https://github.com/noirbizarre/commitizen.git@feature/template-override
  script:
    - cz changelog --dry-run >> $OUT
  artifacts:
    paths:
      - $OUT

.build-docs:
  stage: docs
  extends:
    - .docs:rules:build-docs
  needs:
    - Export GQL Schema
    - Export Changelog
  image: python:3.10
  variables:
    POETRY_VERSION: 1.3.2
    POETRY_VIRTUALENVS_CREATE: "false"
  before_script:
    - pip3 install poetry==${POETRY_VERSION}
    - cd docs && poetry install --no-interaction
  script:
    - cat .dynamic_changelog.md .static_changelog.md >> src/changelog.md
    - mkdocs build --strict --site-dir=$CI_PROJECT_DIR/site
  artifacts:
    paths:
      - $CI_PROJECT_DIR/site
    expire_in: 1 week

Build and deploy branch docs:
  extends:
    - .build-docs
  environment:
    name: docs/$CI_COMMIT_REF_SLUG
    url: $CI_JOB_URL/artifacts/file/site/index.html
    auto_stop_in: 1 week
  rules:
    - <<: *if-merge-request

Build master docs:
  extends:
    - .build-docs
    - .docs:rules:deploy-master-docs

# To release to GitLab Pages, the job must be called 'pages'
pages:
  stage: docs
  extends:
    - .docs:rules:deploy-master-docs
  needs:
    - Build master docs
  image: alpine:latest
  script:
    - cp -r $CI_PROJECT_DIR/site public
  artifacts:
    paths:
      - public/
