# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

# For `docker push` to work, the following environment variables have to set in
# the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

# For the Review App, the following environment variables have to be set in the
# GitLab UI:
# REVIEW_KEYCLOAK_ADMIN_PASSWORD
# REVIEW_TEMPOTEST_CLIENT_SECRET

stages:
  - lint
  # build stage is not blocked by lint stage, as we have a DAG:
  # https://docs.gitlab.com/ee/ci/directed_acyclic_graph/index.html
  - prebuild
  - build
  - test
  - coverage
  - review
  - qa
  - prepare-release
  - release
  - deploy
  - docs

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo
  FRONTEND_RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo-frontend
  KANIKO_VERSION: v1.3.0-debug

  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  FRONTEND_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA}
  FRONTEND_TEST_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/frontend-test:${CI_COMMIT_SHA}
  TEMPOTEST_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/tempotest:${CI_COMMIT_SHA}
  KEYCLOAK_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/keycloak:${CI_COMMIT_SHA}
  KEYCLOAK_DB_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/keycloak-db:${CI_COMMIT_SHA}

  PYPROJECT_ROOT: "./backend"

  LORA_IMAGE: magentaaps/lora:4.2.1

  REVIEW_URL: "https://os2mo-mr$CI_MERGE_REQUEST_IID.moraci.magentahosted.dk"
  REVIEW_TERRAFORM_STATE_ADDRESS: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/terraform/state/tempotest-mr$CI_MERGE_REQUEST_IID"

include:
  - project: "labs/salt-automation"
    ref: "master"
    file: "/gitlab-ci-templates/common/autopub.v1.yml"
  - project: "labs/salt-automation"
    ref: "master"
    file: "/gitlab-ci-templates/common/docker-release-meta.v1.yml"
  - project: "labs/salt-automation"
    ref: "master"
    file: "/gitlab-ci-templates/common/config-updater-meta.v1.yml"

# Only run pipeline when pushing a tag or a branch.
# This is a workaround for a bug causing detached pipelines on MRs
# See: https://gitlab.com/gitlab-org/gitlab/-/issues/34756
#      https://docs.gitlab.com/ee/ci/yaml/#workflowrules-templates
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_ID

.master-rules:
  rules:
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success

# Lint stage
#############

.lint-default:
  extends: .master-rules
  stage: lint
  interruptible: true
  needs: []
  image: python:3.9
  services: []

Pre-commit:
  extends: .lint-default
  before_script:
    - pip install pre-commit pydocstyle
    - pre-commit install
    # Fetch terraform
    - TERRAFORM_VERSION="1.1.6"
    - TERRAFORM_DOWNLOAD_URL=https://releases.hashicorp.com/terraform
    - TERRAFORM_URL=${TERRAFORM_DOWNLOAD_URL}/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    - curl -o terraform_linux_amd64.zip -sL ${TERRAFORM_URL}
    - unzip terraform_linux_amd64.zip -d /usr/bin/
    - chmod +x /usr/bin/terraform
  script:
    - pre-commit run --all-files
    - pydocstyle backend/mora/graphapi/ --convention=google --add-ignore=D1

Lint Dockerfiles:
  extends: .lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='*Dockerfile*' --ignored | xargs --max-lines=1 hadolint

REUSE compliance:
  extends: .lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

Lint shell scripts:
  extends: .lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored -c | xargs shellcheck

# Prebuild stage
#############

Prebuild Keycloak-realm:
  extends: .master-rules
  stage: prebuild
  interruptible: true
  needs: []
  image:
    name: magentaaps/os2mo-keycloak-realm-builder:2.3.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none # We do not need the source code

    KEYCLOAK_VERSION: 14.0.0
    KEYCLOAK_SSL_REQUIRED: external # for MO
    KEYCLOAK_SSL_REQUIRED_MO: external # for realm builder
    KEYCLOAK_LORA_REALM_ENABLED: "true"
    KEYCLOAK_LORA_CLIENT_SECRET: 158a2075-aa8a-421c-94a4-2df35377014a
    KEYCLOAK_DIPEX_CLIENT_ENABLED: "true"
    KEYCLOAK_DIPEX_CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
    KEYCLOAK_REALM_USERS: '[{"username": "bruce", "password": "bruce", "firstname": "Bruce", "lastname": "Lee", "email": "bruce@kung.fu", "enabled": true, "uuid": "99e7b256-7dfa-4ee8-95c6-e3abe82e236a"}]'
    KEYCLOAK_MO_CLIENT_REDIRECT_URI: '["*"]'
    KEYCLOAK_MO_CLIENT_WEB_ORIGIN: '["*"]'
  script:
    - export KEYCLOAK_REALM_JSON_PATH=$PWD/keycloak-realm.json
    - cd /app
    - python main.py
  artifacts:
    paths:
      - keycloak-realm.json
    expire_in: 1 day

# Build stage
#############

Build OS2MO:
  stage: build
  interruptible: true
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/api.Dockerfile
      --destination=${IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success

Build test frontend:
  extends: .master-rules
  stage: build
  interruptible: true
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/frontend.Dockerfile
      --destination=${FRONTEND_TEST_IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}
      --target frontend

Build frontend:
  extends: .master-rules
  stage: build
  interruptible: true
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/frontend.Dockerfile
      --destination=${FRONTEND_IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success

Build Tempotest:
  stage: build
  needs: []
  image:
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR/tempotest
      --dockerfile=$CI_PROJECT_DIR/tempotest/Dockerfile
      --destination=$TEMPOTEST_IMAGE_SHA

Build Keycloak:
  extends: .master-rules
  stage: build
  interruptible: true
  needs: ["Prebuild Keycloak-realm"]
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/ci.keycloak.Dockerfile
      --destination=${KEYCLOAK_IMAGE_SHA}

Build Keycloak DB:
  extends: .master-rules
  stage: build
  needs: []
  image:
    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0 contains fatal bugs.
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/ci.keycloak-db.Dockerfile
      --destination=${KEYCLOAK_DB_IMAGE_SHA}


# Services Template
###################
.services:
  services:
    - name: magentaaps/postgres-os2mo:10-11.7-test  # TODO: upgrade?
      alias: mox-db
    - name: ${LORA_IMAGE}
      alias: mox
    - name: ${KEYCLOAK_DB_IMAGE_SHA}
      alias: keycloak-db
    - name: ${KEYCLOAK_IMAGE_SHA}
      alias: keycloak
  variables:
    # Enable one docker network per job on the runner. This enables services to
    # reach each other over the network. It requires a special runner with this
    # feature. The feature is introduced in
    # https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1569, but not
    # officially released in any Gitlab runner. It should hopefully be released
    # with 12.6 on 2019-12-22.
    FF_NETWORK_PER_BUILD: 1
    # for postgres-os2mo service
    DB_NAME: mox
    DB_USER: mox
    DB_PASSWORD: mox
    CONF_DB_NAME: mora
    CONF_DB_USER: mora
    CONF_DB_PASSWORD: mora
    SESSIONS_DB_NAME: sessions
    SESSIONS_DB_USER: sessions
    SESSIONS_DB_PASSWORD: sessions
    # for mox service
    MAX_WORKERS: "1"
    TESTING_API: "true"
    HYPOTHESIS_PROFILE: ci
    LORA_AUTH: "false"
    DB_HOST: mox-db
    DB_EXTENSIONS_PATH: "oio_rest/oio_rest/db_extensions/mo-01.json"
    # for mo
    DUMMY_MODE: "true"
    ENVIRONMENT: "testing"
    PYTHONASYNCIODEBUG: "1"
    LORA_URL: "http://mox/"
    KEYCLOAK_SCHEMA: "http"
    KEYCLOAK_PORT: 8080
    KEYCLOAK_AUTH_SERVER_URL: "http://keycloak:8080/auth/"
    KEYCLOAK_VERIFY_AUDIENCE: "false"
    CONF_DB_HOST: "mox-db"
    CONF_DB_PORT: "5432"
    AMQP_ENABLE: "false"
    QUERY_EXPORT_DIR: "/queries"
    BASE_URL: "http://mo"
    GRAPHQL_ENABLE: "true"
    GRAPHQL_AUTH: "false"


# Test stage
############

.test-default:
  extends: [.master-rules, .services]
  stage: test
  interruptible: true
  needs:
    ["Build OS2MO", "Build Keycloak", "Build Keycloak DB", "Build frontend"]
  variables:
    # $CI_JOB_ID is unique across parallel jobs, so this works as expected
    COVERAGE_FILE: $CI_PROJECT_DIR/.coverage.$CI_JOB_ID


Unit-test:
  extends: .test-default
  image:
    name: ${IMAGE_SHA}
  script:
    - pytest
      -p no:cacheprovider
      -m "not serial"
      -k "not graphapi"
      --color=yes
      --show-capture=no
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov=mora
      --workers auto
  artifacts:
    when: always
    paths:
      - $COVERAGE_FILE
    reports:
      junit: $CI_PROJECT_DIR/junit.xml

GraphAPI-test:
  extends: .test-default
  image:
    name: ${IMAGE_SHA}
  script:
    - pytest
      -k "graphapi"
      -p no:cacheprovider
      --color=yes
      --show-capture=no
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov=backend/mora/graphapi
      --cov-report html:$CI_PROJECT_DIR/coverage-html
      --cov-report term
      --cov-fail-under=67
      --workers auto
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage-html
      - $COVERAGE_FILE
    reports:
      junit: $CI_PROJECT_DIR/junit.xml

Integration-test:
  extends: .test-default
  image:
    name: ${IMAGE_SHA}
  parallel: 6
  script:
    - pytest
      -m "serial"
      -p no:cacheprovider
      --color=yes
      --show-capture=no
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov=mora
      --group $CI_NODE_INDEX
      --splits $CI_NODE_TOTAL
      --splitting-algorithm least_duration
      --durations-path backend/tests/.test_durations
  artifacts:
    when: always
    paths:
      - $COVERAGE_FILE
    reports:
      junit: $CI_PROJECT_DIR/junit.xml

Coverage:
  extends: .master-rules
  stage: coverage
  image: python:3.9-slim
  needs: [Unit-test, GraphAPI-test, Integration-test]
  before_script:
    - pip install coverage
    - coverage combine
  script:
    - coverage report --fail-under=85 --skip-empty
  after_script:
    - coverage html -d $CI_PROJECT_DIR/coverage-html --skip-empty
    - coverage xml -o $CI_PROJECT_DIR/coverage.xml --skip-empty
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - coverage-html
    reports:
      cobertura: $CI_PROJECT_DIR/coverage.xml

Vue-unit-test:
  extends: .test-default
  image:
    name: ${FRONTEND_TEST_IMAGE_SHA}
  variables:
    GIT_STRATEGY: none
  script:
    - cd /app/frontend
    - yarn install --dev
    - yarn test:unit
      --coverage
      --coverageReporters=cobertura
      --coverageReporters=html
      --coverageReporters=text-summary
      --coverageDirectory=$CI_PROJECT_DIR/coverage
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage
    # reports:
    #   cobertura: $CI_PROJECT_DIR/coverage/cobertura-coverage.xml

# TODO: Move to QA / use cluster services?
# e2e-test:
#   extends: .test-default
#   image:
#     name: magentalabs/testcafe:latest
#     entrypoint: ["/bin/sh", "-c"]
#   services:
#     - name: magentaaps/postgres-os2mo:9.6.15-2-test
#       alias: mox-db
#     - name: magentaaps/lora:dev
#       alias: mox
#     - name: ${IMAGE_SHA}
#       alias: mo
#     - name: ${KEYCLOAK_IMAGE_SHA}
#       alias: keycloak
#     - name: ${KEYCLOAK_DB_IMAGE_SHA}
#       alias: keycloak-db
#   script:
#     - sleep 30
#     - cd /
#     - /opt/testcafe/docker/testcafe-docker.sh
#         chromium:headless
#         $CI_PROJECT_DIR/frontend/e2e-tests
#         --skip-js-errors
#         --speed 0.7
#         --selector-timeout 30000
#         --screenshot $CI_PROJECT_DIR/artifacts
#         --video $CI_PROJECT_DIR/artifacts
#   artifacts:
#     when: always
#     paths:
#       - $CI_PROJECT_DIR/artifacts
#   allow_failure: true


# Review Stage
##############

deploy_review:
  stage: review
  needs: ["Build OS2MO"]
  image: debian:bullseye
  variables:
    GIT_STRATEGY: none # We do not need the source code
  before_script:
    - apt-get update && apt-get install -y git j2cli curl jq
  script:
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation/flux/clusters/os2mo-ci-magenta-az/
    - |
      extra_config="
      ---
      apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      metadata:
        name: os2mo
      spec:
        values:
          os2mo:
            image:
              repository: reg.magenta.dk/rammearkitektur/os2mo
              tag: $CI_COMMIT_SHA
              pullSecret: gitlab-os2mo-pull-secret
          keycloak:
            admin_password: \"$REVIEW_KEYCLOAK_ADMIN_PASSWORD\""  # TODO: Not great
    - ./template.sh os2mo-mr$CI_MERGE_REQUEST_IID "$extra_config"
    - git add kustomization.yaml os2mo-mr$CI_MERGE_REQUEST_IID
    - git status
    - git commit -m "[cd] Deploy OS2MO MR$CI_MERGE_REQUEST_IID to flux CI cluster" || true
    - git push || true
    - until $(curl "$REVIEW_URL/version/" | jq ".mo_hash == \"$CI_COMMIT_SHA\""); do sleep 5; done
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    # Cannot use $REVIEW_URL for the url because GitLab
    url: "https://os2mo-mr$CI_MERGE_REQUEST_IID.moraci.magentahosted.dk"
    on_stop: stop_review
    auto_stop_in: 1 week
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true

stop_review:
  stage: review
  needs: []
  image: debian:bullseye
  variables:
    GIT_STRATEGY: none # We do not need the source code
  before_script:
    - apt-get update && apt-get install -y git j2cli
  script:
    - git config --global user.email "labs@magenta-aps.dk"
    - git config --global user.name "OS2MO Config Updater"
    - git clone https://$DEPLOY_USER:$ACCESS_TOKEN@git.magenta.dk/labs/salt-automation.git
    - cd salt-automation/flux/clusters/os2mo-ci-magenta-az/
    - ./untemplate.sh os2mo-mr$CI_MERGE_REQUEST_IID
    - git add kustomization.yaml os2mo-mr$CI_MERGE_REQUEST_IID
    - git status
    - git commit -m "[cd] Undeploy OS2MO MR$CI_MERGE_REQUEST_IID from flux CI cluster" || true
    - git push || true
  environment:
    name: review/$CI_MERGE_REQUEST_IID
    action: stop
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true

Delete Review Terraform State:
  stage: review
  needs: ["stop_review"]
  image: curlimages/curl:7.81.0
  script:
    - 'curl --header "Private-Token: $REVIEW_TERRAFORM_STATE_CI_TOKEN" --request DELETE "$REVIEW_TERRAFORM_STATE_ADDRESS"'


# QA Stage
###################
Create Performance Test Keycloak Token:
  stage: qa
  needs: ["deploy_review"]
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  variables:
    TF_ADDRESS: $REVIEW_TERRAFORM_STATE_ADDRESS
    TF_VAR_keycloak_admin_password: $REVIEW_KEYCLOAK_ADMIN_PASSWORD
    TF_VAR_keycloak_url: $REVIEW_URL
    TF_VAR_keycloak_tempotest_client_secret: $REVIEW_TEMPOTEST_CLIENT_SECRET
  before_script:
    - cd tempotest/
    - gitlab-terraform init
    - gitlab-terraform validate
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
    - gitlab-terraform apply


Performance Tests:
  stage: qa
  needs: ["Create Performance Test Keycloak Token"]
  image:
    name: $TEMPOTEST_IMAGE_SHA
    entrypoint: [""]
  tags:
    - high-mem  # we don't want other jobs impacting the test results
  script: "/k6 run /script.js --summary-export=load-performance.json"
  variables:
    MO_URL: "$REVIEW_URL"
    AUTH_SERVER: "$REVIEW_URL/auth"
    CLIENT_ID: "tempotest"
    CLIENT_SECRET: "$REVIEW_TEMPOTEST_CLIENT_SECRET"
  artifacts:
    when: always
    reports:
      load_performance: load-performance.json


# Release stage
###############
Release API master:
  extends: .release-master
  variables:
    CI_IMAGE: ${IMAGE_SHA}
    RELEASE_IMAGE: ${RELEASE_REGISTRY_IMAGE}

Release API version:
  extends: .release-version
  variables:
    CI_IMAGE: ${IMAGE_SHA}
    RELEASE_IMAGE: ${RELEASE_REGISTRY_IMAGE}

Release Frontend master:
  extends: .release-master
  variables:
    CI_IMAGE: ${FRONTEND_IMAGE_SHA}
    RELEASE_IMAGE: ${FRONTEND_RELEASE_REGISTRY_IMAGE}

Release Frontend version:
  extends: .release-version
  variables:
    CI_IMAGE: ${FRONTEND_IMAGE_SHA}
    RELEASE_IMAGE: ${FRONTEND_RELEASE_REGISTRY_IMAGE}


# Deploy stage
##############

Release to Dev:
  extends: .release-to-dev
  needs: ["Release API version"]
  variables:
    ENDPOINT: os2mo/flux/update-dev

Release to Test:
  extends: .release-to-test
  needs: []
  variables:
    ENDPOINT: os2mo/flux/update-test

Release to Prod:
  extends: .release-to-prod
  needs: []
  variables:
    ENDPOINT: os2mo/flux/update-prod

# Docs stage
############
.docs-rules:
  interruptible: true
  stage: docs

Export GQL Schema:
  extends: .docs-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
      when: never
    - when: on_success
  image: ${IMAGE_SHA}
  variables:
    OUT: $CI_PROJECT_DIR/docs/src/graphql/voyager.html
  needs: ["Build OS2MO"]
  script:
    - python docs/schema_to_voyager.py
  artifacts:
    paths:
      - $OUT

.build-docs:
  extends: .docs-rules
  image: python:3.9
  needs: ["Export GQL Schema"]
  variables:
    POETRY_VERSION: 1.1.12
    POETRY_VIRTUALENVS_CREATE: "false"
  before_script:
    - pip3 install poetry==${POETRY_VERSION}
    - cd docs && poetry install --no-interaction
  script:
    - mkdocs build --strict --site-dir=$CI_PROJECT_DIR/site
  artifacts:
    paths:
      - $CI_PROJECT_DIR/site
    expire_in: 1 week

# "Deploy" docs when not on master
Build branch docs:
  extends: .build-docs
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
      when: never
    - if: '$CI_COMMIT_REF_NAME != "master"'
  environment:
    name: docs/$CI_COMMIT_REF_SLUG
    url: $CI_JOB_URL/artifacts/file/site/index.html
    auto_stop_in: 1 week

Build docs:
  extends: .build-docs
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
      when: never
    - if: '$CI_COMMIT_REF_NAME == "master"'

pages:
  extends: .docs-rules
  image: python:3.9
  needs: ["Build docs"]
  script:
    - cp -r $CI_PROJECT_DIR/site public
  artifacts:
    paths:
      - public/
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
      when: never
    - if: '$CI_COMMIT_REF_NAME == "master"'
