# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0

stages:
  - sync
  - lint
  - build
  - review
  - test
  - coverage
  - prepare-release
  - release
  - deploy
  - docs

variables:
  BACKEND_IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  FRONTEND_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA}
  FRONTEND_TEST_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/frontend-test:${CI_COMMIT_SHA}
  KEYCLOAK_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/keycloak:${CI_COMMIT_SHA}
  KEYCLOAK_DB_IMAGE_SHA: ${CI_REGISTRY_IMAGE}/keycloak-db:${CI_COMMIT_SHA}

  PYPROJECT_ROOT: "./backend"
  PYPROJECT_PREFIX: backend
  PYTEST_COV_FAIL_UNDER: 80
  PYTEST_COV_MODULE: "mora"

  # We use kaniko v0.13.0 as newer versions contain fatal bugs
  KANIKO_VERSION: v1.3.0-debug
  BACKEND_RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo
  FRONTEND_RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/os2mo-frontend

  # Review values cannot be changed without also modifying salt-automation/config-updater
  REVIEW_CONFIG_UPDATER_URL: "https://config-updater.magentahosted.dk/os2mo/review-apps/os2mo"

include:
  - local: "ra-data-models/.gitlab-ci.yml"
  - project: "labs/salt-automation"
    file: "/gitlab-ci-templates/common/autopub.v1.yml"
  - project: "labs/salt-automation"
    file: "/gitlab-ci-templates/common/docker-release-meta.v1.yml"
  - project: "labs/salt-automation"
    file: "/gitlab-ci-templates/common/config-updater-meta.v1.yml"
  - project: "labs/salt-automation"
    ref: "feature/52316_pytest_parallel"
    file: "/gitlab-ci-templates/python/pytest-meta.v1.yml"



# Conditions
#############
# Global Conditions
.if-default-branch-refs: &if-default-branch-refs
  if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.if-tag: &if-tag
  if: '$CI_COMMIT_TAG'

.if-tag-semver: &if-tag-semver
  if: '$CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/'

.if-merge-request: &if-merge-request
  if: '$CI_MERGE_REQUEST_IID'

.if-schedule: &if-schedule
  if: '$CI_PIPELINE_SOURCE == "schedule"'

# Sync Conditions
.if-merge-request-labels-dont-interrupt: &if-merge-request-labels-dont-interrupt
  if: "$CI_MERGE_REQUEST_LABELS =~ /Pipeline::Sync::Don't Interrupt/"

# Review Conditions
.if-merge-request-labels-run-review-app: &if-merge-request-labels-run-review-app
  if: '$CI_MERGE_REQUEST_LABELS =~ /Pipeline::Review::Run Review App/'


# Workflow
###########
workflow:
  rules:
    - <<: *if-tag
      variables:
        # Override the IMAGE_SHA variable on tag pipelines to avoid both the default
        # branch pipeline and tag pipeline overriding each other's images arbitrarily when
        # they are both running at the same time on master.
        BACKEND_IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - <<: *if-default-branch-refs
    - <<: *if-merge-request

default:
  # All jobs are interruptible by default
  interruptible: true


# Services
###########
.services-start-base:
  variables:
    FF_NETWORK_PER_BUILD: 1  # activate container-to-container networking

.services:start-all:
  extends:
    - .services-start-base
  needs:
    - Build Keycloak DB
    - Build Keycloak
  services:
    # mox db
    - name: magentaaps/postgres-os2mo:11-11.7-test
      alias: mox-db
      variables:
        DB_NAME: mox
        DB_USER: mox
        DB_PASSWORD: mox
    # Keycloak
    - name: $KEYCLOAK_DB_IMAGE_SHA
      alias: keycloak-db
    - name: $KEYCLOAK_IMAGE_SHA
      alias: keycloak

.services:use-mo:
  needs:
    - Build OS2MO
  image: $BACKEND_IMAGE_SHA
  variables:
    PYTHONASYNCIODEBUG: "1"
    ENVIRONMENT: "testing"
    DUMMY_MODE: "true"

    KEYCLOAK_SCHEMA: "http"
    KEYCLOAK_PORT: 8080
    KEYCLOAK_AUTH_SERVER_URL: "http://keycloak:8080/auth/"
    KEYCLOAK_VERIFY_AUDIENCE: "false"

    AMQP_ENABLE: "false"
    GRAPHQL_AUTH: "false"
    QUERY_EXPORT_DIR: "/tmp"

    MAX_WORKERS: "1"
    TESTING_API: "true"
    LORA_AUTH: "false"
    DB_HOST: mox-db
    DB_NAME: mox
    DB_USER: mox
    DB_PASSWORD: mox

    LORA_URL: "http://localhost/lora/"
    ENABLE_INTERNAL_LORA: "true"


# Sync
#######
Don't Interrupt:
  stage: sync
  image: alpine:latest
  interruptible: false
  variables:
    GIT_STRATEGY: none
  script:
    - echo "This jobs makes sure this pipeline won't be interrupted!"
    - echo "It works because you cannot cancel subsequent jobs after a job with interruptible=false starts."
    - echo "See https://docs.gitlab.com/ee/ci/yaml/#interruptible for more information."
  rules:
    - <<: *if-default-branch-refs
    - <<: *if-tag
    - <<: *if-schedule
    - <<: *if-merge-request-labels-dont-interrupt
    - when: manual
      allow_failure: true


# Lint
#######
.lint-base:
  stage: lint
  needs: []
  image: python:3.10
  # TODO: Individual lint rules for each file type using 'changes' patterns
  rules:
    - <<: *if-merge-request

Pre-commit:
  extends: .lint-base
  before_script:
    - pip install pre-commit
    - pre-commit install
    # Fetch terraform
    - TERRAFORM_VERSION="1.1.6"
    - TERRAFORM_DOWNLOAD_URL=https://releases.hashicorp.com/terraform
    - TERRAFORM_URL=${TERRAFORM_DOWNLOAD_URL}/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    - curl -o terraform_linux_amd64.zip -sL ${TERRAFORM_URL}
    - unzip terraform_linux_amd64.zip -d /usr/bin/
    - chmod +x /usr/bin/terraform
  script:
    - pre-commit run --all-files
  variables:
    PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PIP_CACHE_DIR}
      - ${PRE_COMMIT_HOME}

Lint Dockerfiles:
  extends: .lint-base
  image: hadolint/hadolint:latest-alpine
  before_script:
    - apk add fd
  script:
    - echo "Running Hadolint, a Dockerfile linter"
    - echo "For more information about reported errors, visit the Hadolint wiki on https://github.com/hadolint/hadolint/wiki"
    # Run fd without exec arg to produce a list of files to be linted
    - fd Dockerfile
    # Run hadolint on every Dockerfile
    - fd Dockerfile --exec hadolint

REUSE compliance:
  # TODO: Do this as part of pre-commit instead
  extends: .lint-base
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

Lint shell scripts:
  # TODO: Do this as part of pre-commit instead
  extends: .lint-base
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored -c | xargs shellcheck


# Build
########
.build-base:
  stage: build
  needs: []
  image:
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}
    entrypoint: [""]

.build:release-image:
  extends:
    - .build-base
  rules:
    - <<: *if-schedule
      when: never
    - when: on_success

.build:test-image:
  extends:
    - .build-base
  rules:
    - <<: *if-merge-request

Build OS2MO:
  extends: .build:release-image
  # TODO: Use gitlab-ci-templates/common/docker-build-meta.v1.yml instead. Migration requires support for COMMIT_SHA and
  # COMMIT_TAG, see https://git.magenta.dk/rammearkitektur/os2mo-triggers/os2mo-amqp-trigger-calculate-primary/-/blob/master/Dockerfile
  # for alternatives to --build-arg.
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/api.Dockerfile
      --destination=${BACKEND_IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}

Build frontend:
  extends: .build:release-image
  # TODO: Use gitlab-ci-templates/common/docker-build-meta.v1.yml instead
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/frontend.Dockerfile
      --destination=${FRONTEND_IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}

Build test frontend:
  extends: .build:test-image
  # TODO: Use gitlab-ci-templates/common/docker-build-meta.v1.yml instead
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/frontend.Dockerfile
      --destination=${FRONTEND_TEST_IMAGE_SHA}
      --build-arg=COMMIT_SHA=${CI_COMMIT_SHA}
      --build-arg=COMMIT_TAG=${CI_COMMIT_TAG}
      --target frontend

Build Keycloak-realm:
  extends: .build:test-image
  image:
    # TODO: Use new realm builder
    name: magentaaps/os2mo-keycloak-realm-builder:2.3.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none # We do not need the source code
    KEYCLOAK_VERSION: 14.0.0
    KEYCLOAK_SSL_REQUIRED: external # for MO
    KEYCLOAK_SSL_REQUIRED_MO: external # for realm builder
    KEYCLOAK_LORA_REALM_ENABLED: "true"
    KEYCLOAK_LORA_CLIENT_SECRET: 158a2075-aa8a-421c-94a4-2df35377014a
    KEYCLOAK_DIPEX_CLIENT_ENABLED: "true"
    KEYCLOAK_DIPEX_CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
    KEYCLOAK_REALM_USERS: '[{"username": "bruce", "password": "bruce", "firstname": "Bruce", "lastname": "Lee", "email": "bruce@kung.fu", "enabled": true, "uuid": "99e7b256-7dfa-4ee8-95c6-e3abe82e236a"}]'
    KEYCLOAK_MO_CLIENT_REDIRECT_URI: '["*"]'
    KEYCLOAK_MO_CLIENT_WEB_ORIGIN: '["*"]'
  script:
    - export KEYCLOAK_REALM_JSON_PATH=$PWD/keycloak-realm.json
    - cd /app
    - python main.py
  artifacts:
    paths:
      - keycloak-realm.json
    expire_in: 1 day

Build Keycloak:
  extends: .build:test-image
  needs:
    - Build Keycloak-realm
  # TODO: Use gitlab-ci-templates/common/docker-build-meta.v1.yml instead
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/ci.keycloak.Dockerfile
      --destination=${KEYCLOAK_IMAGE_SHA}

Build Keycloak DB:
  extends: .build:test-image
  # TODO: Use gitlab-ci-templates/common/docker-build-meta.v1.yml instead
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/ci.keycloak-db.Dockerfile
      --destination=${KEYCLOAK_DB_IMAGE_SHA}

# Tests
########
.test-base:
  stage: test
  variables:
    # $CI_JOB_ID is unique across parallel jobs, so this works as expected
    COVERAGE_FILE: $CI_PROJECT_DIR/.coverage.$CI_JOB_ID
  rules:
    - <<: *if-merge-request


# Backend Tests
################
.backend-test-base:
  extends:
    - .test-base
    - .services:use-mo
  variables:
    HYPOTHESIS_PROFILE: "ci"
    QUERY_EXPORT_DIR: "/tmp"


Unit-test:
  extends:
    - .pytest
  variables:
    HYPOTHESIS_PROFILE: "ci"
    QUERY_EXPORT_DIR: "/tmp"

    PYTEST_EXTRA_FLAGS: '-m "not serial" -k "not graphapi"'
    PYTHONASYNCIODEBUG: "1"
    ENVIRONMENT: "testing"
    DUMMY_MODE: "true"

    AMQP_ENABLE: "false"
    GRAPHQL_AUTH: "false"

    MAX_WORKERS: "1"
    TESTING_API: "true"
    LORA_AUTH: "false"
    DB_HOST: mox-db
    DB_NAME: mox
    DB_USER: mox
    DB_PASSWORD: mox

    LORA_URL: "http://localhost/lora/"
    ENABLE_INTERNAL_LORA: "true"
  rules:
    - <<: *if-merge-request


#GraphAPI-test:
#  extends:
#    - .backend-test-base
#  script:
#    - pytest
#      backend/tests/graphapi
#      -p no:cacheprovider
#      --color=yes
#      --show-capture=stdout
#      --junitxml $CI_PROJECT_DIR/junit.xml
#      --cov=backend/mora/graphapi
#      --cov-report html:$CI_PROJECT_DIR/coverage-html
#      --cov-report term
#      --cov-fail-under=35
#  artifacts:
#    when: always
#    paths:
#      - $CI_PROJECT_DIR/coverage-html
#      - $COVERAGE_FILE
#    reports:
#      junit: $CI_PROJECT_DIR/junit.xml
#
#GraphAPI-Integration-test:
#  extends:
#    - .backend-test-base
#    - .services:start-all
#  needs:
#    - !reference [".backend-test-base", needs]
#    - !reference [".services:start-all", needs]
#  parallel: 4
#  script:
#    - pytest
#      backend/tests/integration/
#      -k "graphapi"
#      -p no:cacheprovider
#      --color=yes
#      --show-capture=stdout
#      --junitxml $CI_PROJECT_DIR/junit.xml
#      --cov=mora
#      --group $CI_NODE_INDEX
#      --splits $CI_NODE_TOTAL
#      --splitting-algorithm least_duration
#      --durations-path backend/tests/.test_durations
#  artifacts:
#    when: always
#    paths:
#      - $COVERAGE_FILE
#    reports:
#      junit: $CI_PROJECT_DIR/junit.xml
#
#Integration-test:
#  extends:
#    - .backend-test-base
#    - .services:start-all
#  needs:
#    - !reference [".backend-test-base", needs]
#    - !reference [".services:start-all", needs]
#  parallel: 4 
#  script:
#    - pytest backend/tests
#      -m "serial and not equivalence"
#      -p no:cacheprovider
#      --color=yes
#      --show-capture=no
#      --junitxml $CI_PROJECT_DIR/junit.xml
#      --cov=mora
#      --group $CI_NODE_INDEX
#      --splits $CI_NODE_TOTAL
#      --splitting-algorithm least_duration
#      --durations-path backend/tests/.test_durations
#  artifacts:
#    when: always
#    paths:
#      - $COVERAGE_FILE
#    reports:
#      junit: $CI_PROJECT_DIR/junit.xml
#
#LoRa-integration-test:
#  extends:
#    - .backend-test-base
#    - .services:start-all
#  needs:
#    - !reference [".backend-test-base", needs]
#    - !reference [".services:start-all", needs]
#  script:
#    - pytest backend/oio_rest/tests
#      -p no:cacheprovider
#      --color=yes
#      --show-capture=stdout
#      --junitxml $CI_PROJECT_DIR/junit.xml
#      --cov=oio_rest
#  artifacts:
#    when: always
#    paths:
#      - $COVERAGE_FILE
#    reports:
#      junit: $CI_PROJECT_DIR/junit.xml
#GraphAPI-test:
#  extends:
#    - .backend-test-base
#  script:
#    - pytest
#      backend/tests/graphapi
#      -p no:cacheprovider
#      --color=yes
#      --show-capture=stdout
#      --junitxml $CI_PROJECT_DIR/junit.xml
#      --cov=backend/mora/graphapi
#      --cov-report html:$CI_PROJECT_DIR/coverage-html
#      --cov-report term
#      --cov-fail-under=35
#  artifacts:
#    when: always
#    paths:
#      - $CI_PROJECT_DIR/coverage-html
#      - $COVERAGE_FILE
#    reports:
#      junit: $CI_PROJECT_DIR/junit.xml
#
#GraphAPI-Integration-test:
#  extends:
#    - .backend-test-base
#    - .services:start-all
#  needs:
#    - !reference [".backend-test-base", needs]
#    - !reference [".services:start-all", needs]
#  parallel: 4
#  script:
#    - pytest
#      backend/tests/integration/
#      -k "graphapi"
#      -p no:cacheprovider
#      --color=yes
#      --show-capture=stdout
#      --junitxml $CI_PROJECT_DIR/junit.xml
#      --cov=mora
#      --group $CI_NODE_INDEX
#      --splits $CI_NODE_TOTAL
#      --splitting-algorithm least_duration
#      --durations-path backend/tests/.test_durations
#  artifacts:
#    when: always
#    paths:
#      - $COVERAGE_FILE
#    reports:
#      junit: $CI_PROJECT_DIR/junit.xml
#
#Integration-test:
#  extends:
#    - .backend-test-base
#    - .services:start-all
#  needs:
#    - !reference [".backend-test-base", needs]
#    - !reference [".services:start-all", needs]
#  parallel: 4 
#  script:
#    - pytest backend/tests
#      -m "serial and not equivalence"
#      -p no:cacheprovider
#      --color=yes
#      --show-capture=no
#      --junitxml $CI_PROJECT_DIR/junit.xml
#      --cov=mora
#      --group $CI_NODE_INDEX
#      --splits $CI_NODE_TOTAL
#      --splitting-algorithm least_duration
#      --durations-path backend/tests/.test_durations
#  artifacts:
#    when: always
#    paths:
#      - $COVERAGE_FILE
#    reports:
#      junit: $CI_PROJECT_DIR/junit.xml
#
#LoRa-integration-test:
#  extends:
#    - .backend-test-base
#    - .services:start-all
#  needs:
#    - !reference [".backend-test-base", needs]
#    - !reference [".services:start-all", needs]
#  script:
#    - pytest backend/oio_rest/tests
#      -p no:cacheprovider
#      --color=yes
#      --show-capture=stdout
#      --junitxml $CI_PROJECT_DIR/junit.xml
#      --cov=oio_rest
#  artifacts:
#    when: always
#    paths:
#      - $COVERAGE_FILE
#    reports:
#      junit: $CI_PROJECT_DIR/junit.xml

Export coverage:
  extends: .export_coverage
  needs:
    - Unit-test
  rules:
    - <<: *if-merge-request

Check coverage:
  extends: .check_coverage
  needs:
    - Unit-test
  rules:
    - <<: *if-merge-request

# Frontend Tests
#################
Vue-unit-test:
  extends:
    - .test-base
  needs:
    - Build test frontend
  image: $FRONTEND_TEST_IMAGE_SHA
  variables:
    GIT_STRATEGY: none
    BASE_URL: "http://mo"
  script:
    - cd /app/frontend
    - yarn install --dev
    - yarn test:unit
      --coverage
      --coverageReporters=cobertura
      --coverageReporters=html
      --coverageReporters=text-summary
      --coverageDirectory=$CI_PROJECT_DIR/coverage
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage
    # reports:
    #   cobertura: $CI_PROJECT_DIR/coverage/cobertura-coverage.xml

# Review
#########
Deploy Review:
  stage: review
  needs:
    - Build OS2MO
  image: debian:bookworm
  variables:
    GIT_STRATEGY: none  # We do not need the source code
  before_script:
    - apt-get update && apt-get install -y curl jq
  script:
    - curl
      --silent
      --fail-with-body
      --request POST
      --user $CONFIG_UPDATER_REVIEW_APP_USERNAME:$CONFIG_UPDATER_REVIEW_APP_PASSWORD
      "$REVIEW_CONFIG_UPDATER_URL/deploy-mr?mr_id=$CI_MERGE_REQUEST_IID&commit_sha=$CI_COMMIT_SHA"
    - until $(curl --silent --fail-with-body "https://review-os2mo-mr${CI_MERGE_REQUEST_IID}.moraci.magentahosted.dk/version/" | jq ".mo_hash == \"$CI_COMMIT_SHA\""); do sleep 5; done
  environment:
    name: "review/review-os2mo-mr${CI_MERGE_REQUEST_IID}"
    url: "https://review-os2mo-mr${CI_MERGE_REQUEST_IID}.moraci.magentahosted.dk"
    on_stop: Stop Review
    auto_stop_in: 1 week
  tags:
    - deploy
  rules:
    - <<: *if-schedule
      when: never
    - <<: *if-merge-request-labels-run-review-app
    - <<: *if-merge-request
      when: manual
      allow_failure: true

Stop Review:
  stage: review
  needs: []
  image: curlimages/curl:7.81.0
  variables:
    GIT_STRATEGY: none  # We do not need the source code
  script:
    - curl
      --silent
      --fail-with-body
      --request POST
      --user $CONFIG_UPDATER_REVIEW_APP_USERNAME:$CONFIG_UPDATER_REVIEW_APP_PASSWORD
      "$REVIEW_CONFIG_UPDATER_URL/undeploy-mr?mr_id=$CI_MERGE_REQUEST_IID"
  environment:
    name: "review/review-os2mo-mr${CI_MERGE_REQUEST_IID}"
    action: stop
  tags:
    - deploy
  rules:
    - <<: *if-merge-request
      when: manual
      allow_failure: true


# Release
##########

Release API master:
  extends:
    - .release-master
  variables:
    CI_IMAGE: $BACKEND_IMAGE_SHA
    RELEASE_IMAGE: $BACKEND_RELEASE_REGISTRY_IMAGE

Release API version:
  extends:
    - .release-version
  variables:
    CI_IMAGE: $BACKEND_IMAGE_SHA
    RELEASE_IMAGE: $BACKEND_RELEASE_REGISTRY_IMAGE

Release Frontend master:
  extends:
    - .release-master
  variables:
    CI_IMAGE: $FRONTEND_IMAGE_SHA
    RELEASE_IMAGE: $FRONTEND_RELEASE_REGISTRY_IMAGE

Release Frontend version:
  extends:
    - .release-version
  variables:
    CI_IMAGE: $FRONTEND_IMAGE_SHA
    RELEASE_IMAGE: $FRONTEND_RELEASE_REGISTRY_IMAGE


# Deploy API
#############
# Flux
Deploy API to Flux Dev:
  extends: .release-to-dev
  needs:
    - Release API version
  variables:
    ENDPOINT: os2mo/flux/os2mo/update-dev

Deploy API to Flux Test:
  extends: .release-to-test
  needs: []
  variables:
    ENDPOINT: os2mo/flux/os2mo/update-test

Deploy API to Flux Prod:
  extends: .release-to-prod
  needs: []
  variables:
    ENDPOINT: os2mo/flux/os2mo/update-prod

# Salt
Deploy API to Salt Dev:
  extends: .release-to-dev
  needs:
    - Release API version
  variables:
    ENDPOINT: os2mo/salt/os2mo/update-dev

Deploy API to Salt Test:
  extends: .release-to-test
  needs: []
  variables:
    ENDPOINT: os2mo/salt/os2mo/update-test

Deploy API to Salt Prod:
  extends: .release-to-prod
  needs: []
  variables:
    ENDPOINT: os2mo/salt/os2mo/update-prod


# Deploy Frontend
##################
# Flux
Deploy frontend to Flux Dev:
  extends: .release-to-dev
  needs:
    - Release Frontend version
  variables:
    ENDPOINT: os2mo/flux/os2mo-frontend/update-dev

Deploy frontend to Flux Test:
  extends: .release-to-test
  needs: []
  variables:
    ENDPOINT: os2mo/flux/os2mo-frontend/update-test

Deploy frontend to Flux Prod:
  extends: .release-to-prod
  needs: []
  variables:
    ENDPOINT: os2mo/flux/os2mo-frontend/update-prod

# Salt
Deploy frontend to Salt Dev:
  extends: .release-to-dev
  needs:
    - Release Frontend version
  variables:
    ENDPOINT: os2mo/salt/os2mo-frontend/update-dev

Deploy frontend to Salt Test:
  extends: .release-to-test
  needs: []
  variables:
    ENDPOINT: os2mo/salt/os2mo-frontend/update-test

Deploy frontend to Salt Prod:
  extends: .release-to-prod
  needs: []
  variables:
    ENDPOINT: os2mo/salt/os2mo-frontend/update-prod


# Docs
#######
.docs-base:
  stage: docs

.docs:rules:deploy-branch-docs:
  rules:
    - <<: *if-merge-request

.docs:rules:deploy-master-docs:
  rules:
    - <<: *if-schedule
      when: never
    - <<: *if-tag-semver
      when: never
    - <<: *if-default-branch-refs

.docs:rules:build-docs:
  rules:
    - !reference [".docs:rules:deploy-branch-docs", rules]
    - !reference [".docs:rules:deploy-master-docs", rules]

Export GQL Schema:
  extends:
    - .docs-base
    - .docs:rules:build-docs
    - .services:use-mo
  variables:
    OUT: $CI_PROJECT_DIR/docs/src/graphql/voyager.html
    QUERY_EXPORT_DIR: "/tmp"
  script:
    - python docs/schema_to_voyager.py
  artifacts:
    paths:
      - $OUT

.build-docs:
  extends:
    - .docs-base
    - .docs:rules:build-docs
  needs:
    - Export GQL Schema
  image: python:3.10
  variables:
    POETRY_VERSION: 1.1.12
    POETRY_VIRTUALENVS_CREATE: "false"
  before_script:
    - pip3 install poetry==${POETRY_VERSION}
    - cd docs && poetry install --no-interaction
  script:
    - mkdocs build --strict --site-dir=$CI_PROJECT_DIR/site
  artifacts:
    paths:
      - $CI_PROJECT_DIR/site
    expire_in: 1 week

Build and deploy branch docs:
  extends:
    - .build-docs
    - .docs:rules:deploy-branch-docs
  environment:
    name: docs/$CI_COMMIT_REF_SLUG
    url: $CI_JOB_URL/artifacts/file/site/index.html
    auto_stop_in: 1 week

Build master docs:
    extends:
    - .build-docs
    - .docs:rules:deploy-master-docs

# To release to GitLab Pages, the job must be called 'pages'
pages:
  extends:
    - .docs-base
    - .docs:rules:deploy-master-docs
  needs:
    - Build master docs
  image: alpine:latest
  script:
    - cp -r $CI_PROJECT_DIR/site public
  artifacts:
    paths:
      - public/
