# Stages
################################################################################

stages:
  - install
  - lint
  - test
  - coverage
  - prepare-release
  - release

# Reusables
################################################################################

.install-deps: &install-deps
  variables:
    POETRY_VERSION: "1.1.11"
    POETRY_VIRTUALENVS_CREATE: "true"
    POETRY_VIRTUALENVS_IN_PROJECT: "true"
  before_script:
    - pip install --no-cache-dir poetry==${POETRY_VERSION}
    - poetry install
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - .venv/

.source-venv: &source-venv
  image: python:3.8-slim
  needs: [Install]
  before_script:
    - source .venv/bin/activate

# Jobs
################################################################################
Install:
  <<: *install-deps
  image: python:3.8-slim
  stage: install
  script:
    - poetry --version

Lint Project:
  <<: *source-venv
  stage: lint
  image: python:3.8
  script:
    - pre-commit install
    - pre-commit run --all-files

Test:
  <<: *source-venv
  stage: test
  variables:
    HYPOTHESIS_PROFILE: ci
  parallel: 8
  script:
    - pytest
      --cov=ramodels
      --cov-report=html
      --shard-id=$(($CI_NODE_INDEX - 1))
      --num-shards=$CI_NODE_TOTAL
    - mv .coverage ".coverage.$(($CI_NODE_INDEX - 1))"
  artifacts:
    when: always
    paths:
      - ".coverage.$(($CI_NODE_INDEX - 1))"

Check coverage:
  stage: coverage
  image: python:3.8-slim
  needs: [Test]
  before_script:
    - pip install coverage
    - coverage combine
  script:
    - coverage report -m --fail-under=100

Autopub:
  stage: prepare-release
  needs: []
  image: python:3.8
  variables:
    PROJECT_ROOT: .
  tags:
    - docker
  before_script:
    # Setup git
    - mkdir -p ~/.ssh
    - cat .gitlab/gitlab-known-hosts >> ~/.ssh/known_hosts
    - git clone https://$AUTOPUB_USER:$AUTOPUB_TOKEN@git.magenta.dk/rammearkitektur/ra-data-models.git
    - cd ra-data-models
    - git checkout master
    - git config --global user.name "MagentaBot"
    - git config --global user.email "info@magenta.dk"
    # Prepare autopub
    - pip install autopub
    - pip install poetry
    - pip install toml
  script:
    - bash .gitlab/autopub.sh
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"

Release to PyPI:
  <<: *install-deps
  stage: release
  image: python:3.8-slim
  script: poetry publish --build -u OS2mo -p $PYPI_PWD
  rules:
    # Matches <version core> from SemVer 2.0.0 BNF grammar.
    # Ex. 2.3.4, but not 2.3.4-rc
    - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/

pages:
  <<: *source-venv
  stage: release
  script:
    - python docs/generate_schemas.py
    - mkdocs build --strict --site-dir public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
