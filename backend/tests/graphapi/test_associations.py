# SPDX-FileCopyrightText: 2021- Magenta ApS
# SPDX-License-Identifier: MPL-2.0
# --------------------------------------------------------------------------------------
# Imports
# --------------------------------------------------------------------------------------
from fastapi.encoders import jsonable_encoder
from hypothesis import given
from hypothesis import HealthCheck, example
from hypothesis import settings
from hypothesis import strategies as st
from hypothesis_graphql import strategies as gql_st
from pytest import MonkeyPatch
from ramodels.mo.details import AssociationRead
from uuid import uuid4

import mora.graphapi.dataloaders as dataloaders
from mora.graphapi.main import get_schema

# --------------------------------------------------------------------------------------
# Tests
# --------------------------------------------------------------------------------------

SCHEMA = str(get_schema())


class TestAssociationsQuery:
    """Class collecting associations query tests.

    Data loaders are mocked to return specific values, generated via
    Hypothesis.
    MonkeyPatch.context is used as a context manager to achieve this,
    because mocks are *not* reset between invocations of Hypothesis examples.
    """

    @given(test_data=st.lists(st.builds(AssociationRead)))
    def test_query_all(self, test_data, graphapi_test, patch_loader):
        """Test that we can query all our associations."""

        # JSON encode test data
        test_data = jsonable_encoder(test_data)

        # Patch dataloader
        with MonkeyPatch.context() as patch:
            patch.setattr(dataloaders, "search_role_type", patch_loader(test_data))
            query = """
                query {
                    associations {
                        org_unit_uuid employee_uuid association_type_uuid primary_uuid
                        substitute_uuid dynamic_classes {uuid} validity {from to}
                    }
                }
            """
            response = graphapi_test.post("/graphql", json={"query": query})

        data, errors = response.json().get("data"), response.json().get("errors")
        assert errors is None
        assert data is not None
        assert data["associations"] == [
            {
                "association_type_uuid": association["association_type_uuid"],
                "org_unit_uuid": association["org_unit_uuid"],
                "employee_uuid": association["employee_uuid"],
                "primary_uuid": association["primary_uuid"],
                "substitute_uuid": association["substitute_uuid"],
                "dynamic_classes": association["dynamic_classes"],
                "validity": association["validity"],
            }
            for association in test_data
        ]

    @given(test_data=st.lists(st.builds(AssociationRead)), st_data=st.data())
    def test_query_by_uuid(self, test_data, st_data, graphapi_test, patch_loader):
        """Test that we can query associations by UUID."""

        # Sample UUIDs
        uuids = [str(model.uuid) for model in test_data]
        test_uuids = st_data.draw(st.lists(st.sampled_from(uuids))) if uuids else []

        # JSON encode test data
        test_data = jsonable_encoder(test_data)

        # Patch dataloader
        with MonkeyPatch.context() as patch:
            patch.setattr(dataloaders, "get_role_type_by_uuid", patch_loader(test_data))
            query = """
                    query TestQuery($uuids: [UUID!]) {
                        associations(uuids: $uuids) {
                            uuid
                        }
                    }
                """
            response = graphapi_test.post(
                "/graphql", json={"query": query, "variables": {"uuids": test_uuids}}
            )

        data, errors = response.json().get("data"), response.json().get("errors")
        assert errors is None
        assert data is not None

        # Check UUID equivalence
        result_uuids = [assoc.get("uuid") for assoc in data["associations"]]
        assert set(result_uuids) == set(test_uuids)
        assert len(result_uuids) == len(set(test_uuids))

    # @settings(suppress_health_check=[HealthCheck.too_slow])
    @settings(suppress_health_check=[HealthCheck.too_slow], max_examples=1)
    @given(query=gql_st.query(SCHEMA, fields=["associations"]))
    # @example(query='{\n  associations {\n    employee {\n      uuid\n    }\n  }\n}\n')
    @example(query='{\n  associations {\n    org_unit {\n      uuid\n    }\n  }\n}\n')
    # @example(query='{\n  associations {\n    primary {\n      uuid\n    }\n  }\n}\n')
    def test_random_queries(self, query, graphapi_test, patch_loader):
        """Test association query permutations generated by Hypothesis GraphQL."""

        # Use fixed test data
        test_data = [
            AssociationRead(
                org_unit_uuid=uuid4(),
                employee_uuid=uuid4(),
                association_type_uuid=uuid4(),
                validity={"from": "2021-01-01"},
            )
        ]
        test_data = jsonable_encoder(test_data)

        with MonkeyPatch.context() as patch:
            # patch.setattr(dataloaders, "search_role_type", patch_loader(test_data))
            patch.setattr(dataloaders, "get_loaders", lambda x: {})
            response = graphapi_test.post("/graphql", json={"query": query})

        data, errors = response.json().get("data"), response.json().get("errors")
        assert errors is None
        assert data is not None
