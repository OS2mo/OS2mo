# SPDX-FileCopyrightText: 2021- Magenta ApS
# SPDX-License-Identifier: MPL-2.0
# --------------------------------------------------------------------------------------
# Imports
# --------------------------------------------------------------------------------------
from uuid import UUID
import json

from hypothesis import given
from hypothesis import strategies as st

from mora.graphapi.models import ITSystemWrite
from tests.conftest import GQLResponse


class TestITSystemMutator:
    @given(test_data=st.builds(ITSystemWrite))
    def test_create_itsystem(self, test_data, graphapi_post):
        mutate_query = """mutation CreateITSystem($input: ITSystemInput!){
                        create_it_system(input: $input){
                            user_key
                            type
                            uuid
                            name
                        }
                    }"""

        td = vars(test_data)

        """
        uuid and user_key are autogenerated in MOBase.
        So to assert input vs. response.data.
        we need to remove uuid and user_key and assert them seperately.
        """
        del td["uuid"]
        del td["system_type"]

        """We are catching some funky type_/type errors from basemodels."""

        if "type_" in td:
            td["type"] = td.pop("type_")

        """
        We need to change UUID types to string.
        for that we use a for loop as it can't be done in comprehension.
        """
        for k, v in td.items():
            if type(v) == UUID:
                td[k] = str(v)
        
        print(">>>>>>>>>>>>>", td)
        td["name"] = td["name"].strip()
        td["user_key"] = td["user_key"].strip()

        mut_response: GQLResponse = graphapi_post(
            query=mutate_query, variables={"input": td}
        )

        """
        As uuid and user_key will be generated we can't assert test_data with response.data directly.
        We remove the two values from test_data and response.data and assert they are UUIDs.
        """
        uuid = None
        create_it_system_dict = {}

        if mut_response.data:
            create_it_system_dict = mut_response.data["create_it_system"]
            uuid = UUID(create_it_system_dict.pop("uuid"))
        else:
            print("*************", td)
        
        # ------------------------------------------------------------
        # Query data to check that it actually gets written to databse
        # ------------------------------------------------------------

        query_query = """query ($uuid: [UUID!]!){
                        __typename
                        itsystems(uuids: $uuid){
                            name
                            type
                            user_key
                            uuid
                        }
                    }"""
        if uuid:
            query_response: GQLResponse = graphapi_post(
                query=query_query, variables={"uuid": [str(uuid)]}
            )

        """Assert response returned by mutation."""

        assert mut_response.errors is None
        assert mut_response.data
        assert create_it_system_dict == td
        assert type(uuid) == UUID

        """Assert response returned by quering data written."""

        td_keys = query_response.data["itsystems"][0].keys()
        query_td_dict = {key: None for key in list(td_keys)}
        query_td_dict = {k: v for k, v in td.items()}

        #
        #
        # Clean up after test?
        #
        #

        assert query_response.errors is None
        assert query_td_dict == td
