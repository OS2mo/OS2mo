#!/usr/bin/env python3
# --------------------------------------------------------------------------------------
# SPDX-FileCopyrightText: 2021 Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
# --------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------
# Imports
# --------------------------------------------------------------------------------------
import asyncio

import pytest
from fastapi.testclient import TestClient
from more_itertools import all_equal

from mora.graphapi.shim import flatten_data
from tests.util import _mox_testing_api
from tests.util import load_sample_structures


# --------------------------------------------------------------------------------------
# Integration test of the entire GraphAPI schema
# --------------------------------------------------------------------------------------


@pytest.fixture(scope="class")
def event_loop():
    """Create class scoped event loop fixture (local to this test file).

    This is necessary in order to create a class scoped sample structures fixture.
    """
    loop = asyncio.get_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="class", autouse=True)
async def sample_structures(testing_db):
    """Class scoped sample structure.

    We only do reads in this integration test, so there is no reason for us to
    load data before and db_reset after every function.
    """
    await load_sample_structures(minimal=False)
    yield
    _mox_testing_api("db-reset")


@pytest.mark.serial
class TestGraphAPI:
    """Test the GraphAPI generated by Strawberry."""

    def test_manager_inheritance(self, graphapi_test: TestClient):
        """Test that inheritance of managers work as expected."""
        # Anders And is manager at humfak
        humfak = "9d07123e-47ac-4a9a-88c8-da82e3a4bc9e"
        # There is no manager at filins
        filins = "85715fc7-925d-401b-822d-467eb4b163b6"

        query = """
        query TestQuery($uuids: [UUID!], $inherit: Boolean!)
        {
            org_units (uuids: $uuids) {
                objects {
                managers(inherit: $inherit) {
                        employee_uuid
                    }
                }
            }
        }
        """
        # No inheritance - no manager for filins
        variables = {"uuids": [filins], "inherit": False}
        response = graphapi_test.post(
            "/graphql", json={"query": query, "variables": variables}
        )
        data, errors = response.json().get("data"), response.json().get("errors")
        assert data
        assert errors is None
        managers = flatten_data(data["org_units"])
        assert managers == [{"managers": []}]

        # Inheritance - Anders And should be manager for both
        variables = {"uuids": [humfak, filins], "inherit": True}
        response = graphapi_test.post(
            "/graphql", json={"query": query, "variables": variables}
        )
        data, errors = response.json().get("data"), response.json().get("errors")
        assert data
        assert errors is None
        managers = flatten_data(data["org_units"])
        assert all_equal(managers)
