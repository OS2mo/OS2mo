# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
services:
  # We use two images in development.
  # * One frontend that runs `vue-cli-service serve`, named `frontend` and
  # * One that runs fastapi named `mo`.
  # The frontend image proxies requests to fastapi.
  # Both of these are served through our nginx proxy.
  proxy:
    image: nginx:1
    volumes:
      - ./dev-environment/nginx-proxy.conf.template:/etc/nginx/templates/default.conf.template:ro
    ports:
      - "127.0.0.1:5001:80"
      - "127.0.0.1:5000:80"
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      # target: frontend build the dynamically reloading frontend
      target: frontend
    environment:
      # `vue-cli-service serve` will proxy requests to mo, as defined in:
      # `frontend/vue.config.js`.
      BASE_URL: http://mo:80
    volumes:
      # To reload on file changes, we mount the current folder into `/code`.
      # However we do not want node_modules on the host machine, so we create
      # an additional volume for it.
      - .:/app/
      - /app/frontend/node_modules
    restart: unless-stopped

  mo:
    tty: true
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    # The `volumes` and `command` mounts the backend directory in the docker
    # container and overwrites the CMD from Dockerfile. With this gunicorn
    # reloads on file changes. This is very useful when developing the backend.
    # We also change the Flask app to one where a testing API for testcafe
    # e2e-tests is enabled.
    volumes:
      # Uncomment this with the path you would like to use for queries
      # - /tmp:/queries
      # For reload
      - ./backend:/app/backend
      - ./.pytest_cache:/app/.pytest_cache
      - ./.cov-report:/tmp/.cov-report:rw
    command: [
        # In production, we use gunicorn with the worker class
        # "uvicorn.workers.UvicornWorker", but that does not work with --reload,
        # so we use uvicorn in development at the cost of some dev/prod parity.
        # This has one issue in dev where the service won't restart (because of
        # the --reload flag) when an error occurs. The service restarts as soon
        # as a file is edited though.
        "uvicorn", "--reload", "--host", "0.0.0.0", "--port", "80", "main:app"
    ]
    env_file: dev-environment/os2mo.env
    restart: unless-stopped

  fixture-loader:
    image: magentaaps/os2mo-fixture-loader:1.2.1
    # For a list of supported fixtures, see:
    # https://git.magenta.dk/rammearkitektur/os2mo-fixture-loader.
    command: ["${FIXTURE:-kolding}"]
    environment:
      PGHOST: mox-db
      PGDATABASE: mox
      PGUSER: postgres
      PGPASSWORD: mysecretpassword
      # Remove GRACEFUL to overwrite your DB
      GRACEFUL: si
    restart: on-failure

  mox:
    image: magentaaps/lora:4.7.2
    # build:
    #   context: ../lora
    #   dockerfile: docker/Dockerfile
    # command: '/start-reload.sh'
    environment:
      DB_HOST: mox-db
      DB_PASSWORD: mox

      MAX_WORKERS: "1"
      TESTING_API: "true"

      LORA_AUTH: "false"
    ports:
      - "127.0.0.1:8080:80"
    restart: unless-stopped

  mox-db:
    image: postgres:11
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    # The following will mount the database data directory to RAM. It
    # significantly speeds up the database at the cost of dataloss on shutdown.
    # This is useful for running tests, but should never be used if you want to
    # save the data.
    # tmpfs:
    #   - /var/lib/postgresql/data
    restart: unless-stopped

  mox-db-init:
    image: magentaaps/postgres-os2mo:12.2-11.7-test
    # build:
    #   context: ../postgres-os2mo
    #   dockerfile: docker/Dockerfile
    environment:
      POSTGRES_HOST: mox-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword

      DB_NAME: mox
      DB_USER: mox
      DB_PASSWORD: mox
    restart: on-failure

  msg_broker:
    # Normally, we expect the `rabbitmq` image. The -management images come
    # with a set of management plugins installed and enabled by default. They
    # can be accessed through the web interface on port 15672. The credentials
    # are guest/guest.
    image: rabbitmq:3-management
    # RabbitMQ stores data based on what it calls the "Node Name", which
    # defaults to the hostname. We set this, so we can keep track of our data.
    hostname: msg_broker
    # We expose the ports here, so decoupled agents can be developed with more
    # ease.
    ports:
      - "127.0.0.1:5672:5672"    # amqp port
      - "127.0.0.1:15672:15672"  # management port
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:14.0.0
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: POSTGRES
      DB_ADDR: "keycloak-db"
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      DB_SCHEMA: public
      DB_DATABASE: keycloak
      PROXY_ADDRESS_FORWARDING: 'true'
      KEYCLOAK_FRONTEND_URL: http://localhost:5000/auth
      # KEYCLOAK_LOGLEVEL: DEBUG
    restart: unless-stopped
    volumes:
      - keycloak-volume:/srv/:ro

  keycloak-gen:
    image: magentaaps/os2mo-keycloak-realm-builder:3.1.0
    environment:
      KEYCLOAK_VERSION: 14.0.0

      POSTGRES_CONNECTION_STRING: postgres://keycloak:keycloak@keycloak-db/keycloak?sslmode=disable
      KEYCLOAK_ADMIN_USERNAME: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KEYCLOAK_URL: "http://keycloak:8080"

      KEYCLOAK_SSL_REQUIRED_MO: external
      KEYCLOAK_SSL_REQUIRED_LORA: external
      KEYCLOAK_LORA_REALM_ENABLED: "true"
      KEYCLOAK_LORA_CLIENT_SECRET: 158a2075-aa8a-421c-94a4-2df35377014a
      KEYCLOAK_DIPEX_CLIENT_ENABLED: "true"
      KEYCLOAK_DIPEX_CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
      KEYCLOAK_LORA_DIPEX_CLIENT_ENABLED: "true"
      KEYCLOAK_LORA_DIPEX_CLIENT_SECRET: "a091ed82-6e82-4efc-a8f0-001e2b127853"
      KEYCLOAK_MO_CLIENT_REDIRECT_URI: '["http://localhost:5000/*", "http://localhost:5001/*"]'
      KEYCLOAK_MO_CLIENT_WEB_ORIGIN: '["http://localhost:5000", "http://localhost:5001"]'
      KEYCLOAK_RBAC_ENABLED: "true"
      KEYCLOAK_REALM_USERS: '[
          {
            "username": "bruce",
            "password": "bruce",
            "firstname": "Bruce",
            "lastname": "Lee",
            "email": "bruce@kung.fu",
            "uuid": "99e7b256-7dfa-4ee8-95c6-e3abe82e236a",
            "enabled": true
          },
          {
            "username": "eline",
            "password": "eline",
            "firstname": "Eline",
            "lastname": "Wedsgaard Christensen",
            "email": "elinec@kolding.dk",
            "uuid": "1c571f8f-0e3e-4ffa-9ff0-d35505781924",
            "roles": ["owner"],
            "enabled": true
          },
          {
            "username": "alvida",
            "password": "alvida",
            "firstname": "Alvida",
            "lastname": "Nibe",
            "email": "alvidan@kolding.dk",
            "uuid": "0fb62199-cb9e-4083-ba45-2a63bfd142d7",
            "roles": ["admin"],
            "enabled": true
          },
          {
            "username": "anders",
            "password": "anders",
            "firstname": "Anders",
            "lastname": "And",
            "email": "anders@andeby.dk",
            "uuid": "53181ed2-f1de-4c4a-a8fd-ab358c2c454a",
            "roles": ["owner"],
            "enabled": true
          }
        ]'
    restart: on-failure
    volumes:
      - keycloak-volume:/srv/

  keycloak-db:
    image: postgres:13.3
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    restart: unless-stopped

  amqp-metrics:
    image: magentaaps/os2mo-amqp-trigger-metrics:latest
    #build:
    #  context: ../os2mo-amqp-trigger-metrics
    #  dockerfile: Dockerfile
    environment:
      AMQP_URL: amqp://guest:guest@msg_broker:5672/
    ports:
      - "127.0.0.1:8012:8000"
    restart: unless-stopped
    profiles:
      - amqp-metrics

volumes:
  keycloak-volume:
