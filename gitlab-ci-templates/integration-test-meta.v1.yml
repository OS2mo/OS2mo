# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

include:
  - project: labs/salt-automation
    file:
      - gitlab-ci-templates/python/pytest-meta.v1.yml

# NOTE: These templates are imported and used by our other components to run integration tests
# against OS2mo. It's very easy to break tests in the other repos by changing something here.

variables:
  # The default config file for OS2mo-init is (re-)declared to allow integrations to
  # overwrite with their own facets, classes and IT-systems.
  OS2MO_INIT_CONFIG: "/config/config.yml"

.variables:mo:
  variables:
    PYTHONASYNCIODEBUG: "1"
    MAX_WORKERS: "1"
    GUNICORN_WORKERS: "1"

    DB_HOST: "mox-db"
    DB_NAME: "mox"
    DB_USER: "mox"
    DB_PASSWORD: "mox"

    KEYCLOAK_SCHEMA: "http"
    KEYCLOAK_PORT: 8080
    KEYCLOAK_AUTH_SERVER_URL: "http://keycloak:8080/auth/"
    KEYCLOAK_VERIFY_AUDIENCE: "false"

    ENVIRONMENT: "testing"
    LORA_AUTH: "false"
    INSECURE_ENABLE_TESTING_API: "true"

    AMQP_ENABLE: "true"
    AMQP_URL: "amqp://guest:guest@msg-broker:5672/"

# GitLab CI services are one-shot without any restart policy, and does not start in
# the order they are defined. To replicate init containers, the entrypoint of the
# "init" services are overwritten to retry until they succeed.
# Additionally, GitLab does not wait for services without an EXPOSE (port) definition
# before starting the main job. This is a problem, since we need to wait for these
# init containers to finish. For example, the realm builder needs to create the
# realm, and os2mo-init needs to ensure all required facets, classes and it-systems
# exist before the integration tests tries to access them. As a workaround, we touch
# a sentinel in /builds, which is shared among all jobs, and wait for it in the main
# job's before_script. See https://docs.gitlab.com/ee/ci/services/ for more info.

.services:mo-backing:
  services:
    # LoRa database
    - name: magentaaps/postgres-os2mo:11-11.7-test
      alias: mox-db
      variables:
        DB_NAME: "mox"
        DB_USER: "mox"
        DB_PASSWORD: "mox"
    # Keycloak
    - name: quay.io/keycloak/keycloak:14.0.0
      alias: keycloak
      variables:
        KEYCLOAK_USER: "admin"
        KEYCLOAK_PASSWORD: "admin"
    - name: magentaaps/os2mo-keycloak-realm-builder:4
      entrypoint:
        - "sh"
        - "-c"
        - |
          while ! sh run.sh; do
            echo 'Waiting for keycloak...'
            sleep 1
          done
          touch /builds/.keycloak-realm-builder-finished
      variables:
        # Since GitLab CI doesn't support multiple services on the same port,
        # we cannot (easily) run a separate postgres for the realm builder's
        # terraform state. Reuse the mox database instead.
        POSTGRES_CONNECTION_STRING: "postgres://mox:mox@mox-db/mox?sslmode=disable"
        KEYCLOAK_URL: "http://keycloak:8080"
        KEYCLOAK_ADMIN_USERNAME: "admin"
        KEYCLOAK_ADMIN_PASSWORD: "admin"
        KEYCLOAK_SSL_REQUIRED_MO: "external"
        KEYCLOAK_MO_CLIENT_REDIRECT_URI: '["*"]'
        KEYCLOAK_MO_CLIENT_WEB_ORIGIN: '["*"]'
        KEYCLOAK_REALM_USERS: '[{"username": "bruce", "password": "bruce", "firstname": "Bruce", "lastname": "Lee", "email": "bruce@kung.fu", "enabled": true, "uuid": "99e7b256-7dfa-4ee8-95c6-e3abe82e236a"}]'
        KEYCLOAK_DIPEX_CLIENT_ENABLED: "true"
        KEYCLOAK_DIPEX_CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
    # AMQP
    # The -management images come with a set of management plugins installed and
    # enabled by default. They can be accessed through the web interface on port 15672.
    # The credentials are guest/guest. Prometheus metrics are exposed on port 15692.
    - name: rabbitmq:3-management
      alias: msg-broker
  before_script:
    - |
      while [ ! -f /builds/.keycloak-realm-builder-finished ]; do
        echo 'Waiting for keycloak realm builder...'
        sleep 1
      done

.integration-test:mo:
  extends:
    - .pytest
  parallel: 2
  variables:
    PYTEST_ADDOPTS: "-m 'integration_test'"
    # Define FastRAMQPI settings for the recommended settings structure
    FASTRAMQPI__MO_URL: "http://mo:5000"
    FASTRAMQPI__CLIENT_ID: "dipex"
    FASTRAMQPI__CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
    FASTRAMQPI__AUTH_SERVER: "http://keycloak:8080/auth"
    FASTRAMQPI__AUTH_REALM: "mo"
    FASTRAMQPI__AMQP__URL: "amqp://guest:guest@msg-broker:5672/"
  services:
    - !reference [ .services:mo-backing, services ]
    # `:latest` here is actually latest and not a cached version because we run
    # our GitLab runners in Kubernetes, which defaults the imagePullPolicy to
    # `Always` when the tag is `latest`.
    # https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    - name: magentaaps/os2mo:latest
      alias: mo
      variables: !reference [ .variables:mo, variables ]
    - name: magentaaps/os2mo-init:2
      variables:
        CONFIG_FILE: $OS2MO_INIT_CONFIG
        MO_URL: "http://mo:5000"
        CLIENT_ID: "dipex"
        CLIENT_SECRET: "603f1c82-d012-4d04-9382-dbe659c533fb"
        AUTH_SERVER: "http://keycloak:8080/auth"
        AUTH_REALM: "mo"
      entrypoint:
        - "sh"
        - "-c"
        - |
          while ! python -m os2mo_init; do
            echo 'Waiting for os2mo...'
            sleep 1
          done
          touch /builds/.os2mo-init-finished
  before_script:
    - !reference [ .pytest, before_script ]
    - !reference [ .services:mo-backing, before_script ]
    - |
      while [ ! -f /builds/.os2mo-init-finished ]; do
        echo 'Waiting for os2mo-init...'
        sleep 1
      done
      # Using the GitLab Docker executor, the runner waits for every port in each
      # service's Docker EXPOSE definition to be reachable before starting the main
      # job. In Kubernetes, however, GitLab only considers the *first* port of each
      # service's definition.
      # This is fine for every service except RabbitMQ, which exposes six different
      # ports; the main AMQP one not being the first.
      # https://gitlab.com/gitlab-org/gitlab-runner/-/merge_requests/4079
      # https://docs.gitlab.com/runner/executors/docker.html
      # https://docs.gitlab.com/runner/executors/kubernetes.html
      # https://github.com/docker-library/rabbitmq/blob/master/Dockerfile-ubuntu.template
      apt update
      apt install -y netcat-openbsd
      while ! nc -z msg-broker 5672; do
        echo 'Waiting for RabbitMQ...'
        sleep 1
      done
