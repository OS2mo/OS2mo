# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
[tool.poetry]
name = "OS2mo"
version = "0.0.0"  # versioning handled by conventional commits
authors = ["Magenta ApS <info@magenta.dk>"]
description = "OS2mo - Medarbejder og Organisation"
license = "MPL-2.0"
documentation = "https://os2mo.readthedocs.io"
readme = "README.rst"
homepage = "https://magenta.dk/"
repository = "https://git.magenta.dk/rammearkitektur/os2mo"
keywords = ["os2mo"]

[tool.poetry.dependencies]
python = "^3.10"
alembic = "^1.11.1"
python-dateutil = "^2.8.2"
# Version 2.9.x always starts a transaction when you connect to a database using a context manager.
# See: https://stackoverflow.com/a/68112827
gunicorn = "^21.0.1"
PyJWT = {extras = ["crypto"], version = "^2.5.0"}
more-itertools = "^9.1.0"
SQLAlchemy = "2.0.19"
SQLAlchemy-Utils = "^0.41.1"
aiohttp = "^3.8.5"
httpx = "^0.24.1"
os2mo-http-trigger-protocol = "^0.0.4"
fastapi = "^0.100.0"
Jinja2 = "^3.1.2"
starlette-context = "^0.3.6"
click = "^8.1.5"
structlog = "^23.1.0"
python-multipart = "^0.0.6"
service-person-stamdata-udvidet = {git = "https://github.com/magenta-aps/service_person_stamdata_udvidet", rev = "1.0.3"}
lora-utils = {git = "https://github.com/magenta-aps/lora-utils"}
prometheus-fastapi-instrumentator = "^6.1.0"
pydantic = {extras = ["email"], version = "^1.10.9"}
os2mo-dar-client = "^1.0.3"
ra-utils = "^1.13.9"
ramqp = "^9.0.2"
uvicorn = "^0.23.0"
strawberry-graphql = "0.196.2"
jsonschema = "^4.18.4"
psycopg2-binary = "~2.9"
sentry-sdk = {extras = ["fastapi"], version = "^1.28.1"}
psycopg = "^3.1.8"

[tool.poetry.dev-dependencies]
requests-mock = "^1.11.0"
freezegun = "^1.2.2"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
aioresponses = "^0.7.4"
parameterized = "^0.9.0"
hypothesis = "^6.82.0"
pytest-asyncio = "^0.21.1"
hypothesis-graphql = "^0.10.0"
pytest-split = "^0.8.1"
pre-commit = "^3.3.3"
"tap.py" = "^3.1"
asgi-lifespan = "^2.1.0"

[tool.poetry.group.ci]
optional = true

[tool.poetry.group.ci.dependencies]
pytest-randomly = "^3.12.0"


[tool.poetry.group.dev.dependencies]
pytest-timeouts = "^1.2.1"
commitizen = {git = "https://github.com/noirbizarre/commitizen.git", rev = "feature/template-override"}
pytest-subtests = "^0.11.0"
respx = "^0.20.2"

[tool.commitizen]
name = "cz_customize"
tag_format = "$version"
changelog_start_rev = "12.11.1"
template = "docs/changelog.md.j2"

[tool.commitizen.customize]
# Regex for parsing commits for the changelog
# TODO: Use upstream commitizen after merge of:
# https://github.com/commitizen-tools/commitizen/pull/645
commit_parser = "^(?P<change_type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?:\\((?P<scope>[^()\r\n]*)\\)|\\()?(?P<breaking>!)?:\\s(\\[#(?P<ticket>.+)\\]\\s)?(?P<message>.*)?(\\n\\n(?P<body>(\\n|.)*))?$"

# Regex for commits to include in the changelog (excludes merge-commits, etc)
changelog_pattern = "^(build|chore|ci|docs|feat|fix|perf|refactor|style|test).*: .*"

# Section header order in the changelog
# Unmatched sections are shown alphabetically
change_type_order = [
  "Features",
  "Bug Fixes",
  "Performance improvements",
  "Documentation",
  "Test improvements",
  "Code Refactor",
  "Build improvements",
  "CI improvements",
  "Style",
  "Chores",
]

[tool.commitizen.customize.change_type_map]
# Section names to use in the changelog
# left-side is the semantic commit verbs, right-side is the changelog section header
build = "Build improvements"
chore = "Chores"
ci = "CI improvements"
docs = "Documentation"
feat = "Features"
fix = "Bug Fixes"
perf = "Performance improvements"
refactor = "Code Refactor"
style = "Style"
test = "Test improvements"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
markers = [
  "integration_test: mark test as an integration test",
]
filterwarnings = ["ignore::pytest.PytestCacheWarning"]
asyncio_mode = "auto"
cache_dir = ".pytest_cache"

[tool.mypy]
ignore_errors = true
plugins = ["pydantic.mypy", "strawberry.ext.mypy_plugin"]

[[tool.mypy.overrides]]
module = "mora.graphapi.*"
disallow_untyped_defs = true
ignore_errors = false
